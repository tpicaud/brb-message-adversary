{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1","program":"/home/tpicaud/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","base64ct","--edition=2021","/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"alloc\"","-C","metadata=36b5e58a8235172c","-C","extra-filename=-36b5e58a8235172c","--out-dir","/home/tpicaud/Documents/Workspace/Rust/brb-msg-adversary/target/rls/debug/deps","-L","dependency=/home/tpicaud/Documents/Workspace/Rust/brb-msg-adversary/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/home/tpicaud/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/tpicaud/Documents/Workspace/Rust/brb-msg-adversary/target/rls/debug/deps/libbase64ct-36b5e58a8235172c.rmeta"},"prelude":{"crate_id":{"name":"base64ct","disambiguator":[2091740491070146248,0]},"crate_root":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src","external_crates":[{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[11763967750977672065,0]}},{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[10106063140927293834,0]}},{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[7335734036341381276,0]}},{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/lib.rs","num":4,"id":{"name":"alloc","disambiguator":[6464017807659102018,0]}}],"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/lib.rs","byte_start":0,"byte_end":2726,"line_start":1,"line_end":104,"column_start":1,"column_end":33}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":389},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/lib.rs","byte_start":2358,"byte_end":2370,"line_start":91,"line_end":91,"column_start":17,"column_end":29},"alias_span":null,"name":"Base64Bcrypt","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":390},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/lib.rs","byte_start":2358,"byte_end":2370,"line_start":91,"line_end":91,"column_start":17,"column_end":29},"alias_span":null,"name":"Base64Bcrypt","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":402},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/lib.rs","byte_start":2387,"byte_end":2398,"line_start":92,"line_end":92,"column_start":16,"column_end":27},"alias_span":null,"name":"Base64Crypt","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":403},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/lib.rs","byte_start":2387,"byte_end":2398,"line_start":92,"line_end":92,"column_start":16,"column_end":27},"alias_span":null,"name":"Base64Crypt","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":415},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/lib.rs","byte_start":2419,"byte_end":2425,"line_start":93,"line_end":93,"column_start":20,"column_end":26},"alias_span":null,"name":"Base64","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":416},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/lib.rs","byte_start":2419,"byte_end":2425,"line_start":93,"line_end":93,"column_start":20,"column_end":26},"alias_span":null,"name":"Base64","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":428},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/lib.rs","byte_start":2427,"byte_end":2441,"line_start":93,"line_end":93,"column_start":28,"column_end":42},"alias_span":null,"name":"Base64Unpadded","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":429},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/lib.rs","byte_start":2427,"byte_end":2441,"line_start":93,"line_end":93,"column_start":28,"column_end":42},"alias_span":null,"name":"Base64Unpadded","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":441},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/lib.rs","byte_start":2458,"byte_end":2467,"line_start":94,"line_end":94,"column_start":15,"column_end":24},"alias_span":null,"name":"Base64Url","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":442},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/lib.rs","byte_start":2458,"byte_end":2467,"line_start":94,"line_end":94,"column_start":15,"column_end":24},"alias_span":null,"name":"Base64Url","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":454},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/lib.rs","byte_start":2469,"byte_end":2486,"line_start":94,"line_end":94,"column_start":26,"column_end":43},"alias_span":null,"name":"Base64UrlUnpadded","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":455},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/lib.rs","byte_start":2469,"byte_end":2486,"line_start":94,"line_end":94,"column_start":26,"column_end":43},"alias_span":null,"name":"Base64UrlUnpadded","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":492},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/lib.rs","byte_start":2509,"byte_end":2516,"line_start":96,"line_end":96,"column_start":14,"column_end":21},"alias_span":null,"name":"Decoder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":220},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/lib.rs","byte_start":2531,"byte_end":2538,"line_start":97,"line_end":97,"column_start":14,"column_end":21},"alias_span":null,"name":"Encoder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":278},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/lib.rs","byte_start":2554,"byte_end":2562,"line_start":98,"line_end":98,"column_start":15,"column_end":23},"alias_span":null,"name":"Encoding","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":573},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/lib.rs","byte_start":2577,"byte_end":2582,"line_start":99,"line_end":99,"column_start":14,"column_end":19},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":560},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/lib.rs","byte_start":2584,"byte_end":2604,"line_start":99,"line_end":99,"column_start":21,"column_end":41},"alias_span":null,"name":"InvalidEncodingError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":561},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/lib.rs","byte_start":2584,"byte_end":2604,"line_start":99,"line_end":99,"column_start":21,"column_end":41},"alias_span":null,"name":"InvalidEncodingError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":547},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/lib.rs","byte_start":2606,"byte_end":2624,"line_start":99,"line_end":99,"column_start":43,"column_end":61},"alias_span":null,"name":"InvalidLengthError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":548},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/lib.rs","byte_start":2606,"byte_end":2624,"line_start":99,"line_end":99,"column_start":43,"column_end":61},"alias_span":null,"name":"InvalidLengthError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":589},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/lib.rs","byte_start":2644,"byte_end":2654,"line_start":100,"line_end":100,"column_start":18,"column_end":28},"alias_span":null,"name":"LineEnding","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/lib.rs","byte_start":0,"byte_end":2726,"line_start":1,"line_end":104,"column_start":1,"column_end":33},"name":"","qualname":"::","value":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":107},{"krate":0,"index":192},{"krate":0,"index":252},{"krate":0,"index":318},{"krate":0,"index":336},{"krate":0,"index":344},{"krate":0,"index":345},{"krate":0,"index":346},{"krate":0,"index":347},{"krate":0,"index":349},{"krate":0,"index":350},{"krate":0,"index":352},{"krate":0,"index":353},{"krate":0,"index":354},{"krate":0,"index":356},{"krate":0,"index":357},{"krate":0,"index":359},{"krate":0,"index":360},{"krate":0,"index":361},{"krate":0,"index":363},{"krate":0,"index":364},{"krate":0,"index":366},{"krate":0,"index":369},{"krate":0,"index":372},{"krate":0,"index":375},{"krate":0,"index":376},{"krate":0,"index":379},{"krate":0,"index":380},{"krate":0,"index":382},{"krate":0,"index":383},{"krate":0,"index":385},{"krate":0,"index":388}],"decl_id":null,"docs":"# [RustCrypto]: Constant-Time Base64","sig":null,"attributes":[{"value":"no_std","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/lib.rs","byte_start":0,"byte_end":10,"line_start":1,"line_end":1,"column_start":1,"column_end":11}},{"value":"warn(clippy :: integer_arithmetic, clippy :: panic, clippy ::\npanic_in_result_fn, clippy :: unwrap_used, missing_docs, rust_2018_idioms,\nunsafe_code, unused_lifetimes, unused_qualifications)","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/lib.rs","byte_start":334,"byte_end":558,"line_start":9,"line_end":19,"column_start":1,"column_end":3}},{"value":"/ # Usage","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/lib.rs","byte_start":560,"byte_end":571,"line_start":21,"line_end":21,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/lib.rs","byte_start":572,"byte_end":575,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ ## Allocating (enable `alloc` crate feature)","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/lib.rs","byte_start":576,"byte_end":624,"line_start":23,"line_end":23,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/lib.rs","byte_start":625,"byte_end":628,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/lib.rs","byte_start":629,"byte_end":636,"line_start":25,"line_end":25,"column_start":1,"column_end":8}},{"value":"/ # #[cfg(feature = \"alloc\")]","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/lib.rs","byte_start":637,"byte_end":668,"line_start":26,"line_end":26,"column_start":1,"column_end":32}},{"value":"/ # {","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/lib.rs","byte_start":669,"byte_end":676,"line_start":27,"line_end":27,"column_start":1,"column_end":8}},{"value":"/ use base64ct::{Base64, Encoding};","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/lib.rs","byte_start":677,"byte_end":714,"line_start":28,"line_end":28,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/lib.rs","byte_start":715,"byte_end":718,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ let bytes = b\"example bytestring!\";","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/lib.rs","byte_start":719,"byte_end":758,"line_start":30,"line_end":30,"column_start":1,"column_end":40}},{"value":"/ let encoded = Base64::encode_string(bytes);","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/lib.rs","byte_start":759,"byte_end":806,"line_start":31,"line_end":31,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(encoded, \"ZXhhbXBsZSBieXRlc3RyaW5nIQ==\");","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/lib.rs","byte_start":807,"byte_end":863,"line_start":32,"line_end":32,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/lib.rs","byte_start":864,"byte_end":867,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ let decoded = Base64::decode_vec(&encoded).unwrap();","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/lib.rs","byte_start":868,"byte_end":924,"line_start":34,"line_end":34,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(decoded, bytes);","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/lib.rs","byte_start":925,"byte_end":956,"line_start":35,"line_end":35,"column_start":1,"column_end":32}},{"value":"/ # }","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/lib.rs","byte_start":957,"byte_end":964,"line_start":36,"line_end":36,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/lib.rs","byte_start":965,"byte_end":972,"line_start":37,"line_end":37,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/lib.rs","byte_start":973,"byte_end":976,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ ## Heapless `no_std` usage","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/lib.rs","byte_start":977,"byte_end":1007,"line_start":39,"line_end":39,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/lib.rs","byte_start":1008,"byte_end":1011,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/lib.rs","byte_start":1012,"byte_end":1019,"line_start":41,"line_end":41,"column_start":1,"column_end":8}},{"value":"/ use base64ct::{Base64, Encoding};","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/lib.rs","byte_start":1020,"byte_end":1057,"line_start":42,"line_end":42,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/lib.rs","byte_start":1058,"byte_end":1061,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ const BUF_SIZE: usize = 128;","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/lib.rs","byte_start":1062,"byte_end":1094,"line_start":44,"line_end":44,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/lib.rs","byte_start":1095,"byte_end":1098,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ let bytes = b\"example bytestring!\";","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/lib.rs","byte_start":1099,"byte_end":1138,"line_start":46,"line_end":46,"column_start":1,"column_end":40}},{"value":"/ assert!(Base64::encoded_len(bytes) <= BUF_SIZE);","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/lib.rs","byte_start":1139,"byte_end":1191,"line_start":47,"line_end":47,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/lib.rs","byte_start":1192,"byte_end":1195,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ let mut enc_buf = [0u8; BUF_SIZE];","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/lib.rs","byte_start":1196,"byte_end":1234,"line_start":49,"line_end":49,"column_start":1,"column_end":39}},{"value":"/ let encoded = Base64::encode(bytes, &mut enc_buf).unwrap();","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/lib.rs","byte_start":1235,"byte_end":1298,"line_start":50,"line_end":50,"column_start":1,"column_end":64}},{"value":"/ assert_eq!(encoded, \"ZXhhbXBsZSBieXRlc3RyaW5nIQ==\");","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/lib.rs","byte_start":1299,"byte_end":1355,"line_start":51,"line_end":51,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/lib.rs","byte_start":1356,"byte_end":1359,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ let mut dec_buf = [0u8; BUF_SIZE];","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/lib.rs","byte_start":1360,"byte_end":1398,"line_start":53,"line_end":53,"column_start":1,"column_end":39}},{"value":"/ let decoded = Base64::decode(encoded, &mut dec_buf).unwrap();","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/lib.rs","byte_start":1399,"byte_end":1464,"line_start":54,"line_end":54,"column_start":1,"column_end":66}},{"value":"/ assert_eq!(decoded, bytes);","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/lib.rs","byte_start":1465,"byte_end":1496,"line_start":55,"line_end":55,"column_start":1,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/lib.rs","byte_start":1497,"byte_end":1504,"line_start":56,"line_end":56,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/lib.rs","byte_start":1505,"byte_end":1508,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ # Implementation","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/lib.rs","byte_start":1509,"byte_end":1529,"line_start":58,"line_end":58,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/lib.rs","byte_start":1530,"byte_end":1533,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ Implemented using integer arithmetic alone without any lookup tables or","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/lib.rs","byte_start":1534,"byte_end":1609,"line_start":60,"line_end":60,"column_start":1,"column_end":76}},{"value":"/ data-dependent branches, thereby providing portable \"best effort\"","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/lib.rs","byte_start":1610,"byte_end":1679,"line_start":61,"line_end":61,"column_start":1,"column_end":70}},{"value":"/ constant-time operation.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/lib.rs","byte_start":1680,"byte_end":1708,"line_start":62,"line_end":62,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/lib.rs","byte_start":1709,"byte_end":1712,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ Not constant-time with respect to message length (only data).","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/lib.rs","byte_start":1713,"byte_end":1778,"line_start":64,"line_end":64,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/lib.rs","byte_start":1779,"byte_end":1782,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ Adapted from the following constant-time C++ implementation of Base64:","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/lib.rs","byte_start":1783,"byte_end":1857,"line_start":66,"line_end":66,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/lib.rs","byte_start":1858,"byte_end":1861,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ <https://github.com/Sc00bz/ConstTimeEncoding/blob/master/base64.cpp>","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/lib.rs","byte_start":1862,"byte_end":1934,"line_start":68,"line_end":68,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/lib.rs","byte_start":1935,"byte_end":1938,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ Copyright (c) 2014 Steve \"Sc00bz\" Thomas (steve at tobtu dot com).","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/lib.rs","byte_start":1939,"byte_end":2009,"line_start":70,"line_end":70,"column_start":1,"column_end":71}},{"value":"/ Derived code is dual licensed MIT + Apache 2 (with permission from Sc00bz).","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/lib.rs","byte_start":2010,"byte_end":2089,"line_start":71,"line_end":71,"column_start":1,"column_end":80}}]},{"kind":"Struct","id":{"krate":0,"index":389},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/alphabet/bcrypt.rs","byte_start":6743,"byte_end":6755,"line_start":12,"line_end":12,"column_start":12,"column_end":24},"name":"Base64Bcrypt","qualname":"::alphabet::bcrypt::Base64Bcrypt","value":"","parent":null,"children":[],"decl_id":null,"docs":" bcrypt Base64 encoding.","sig":null,"attributes":[{"value":"/ bcrypt Base64 encoding.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/alphabet/bcrypt.rs","byte_start":6546,"byte_end":6573,"line_start":5,"line_end":5,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/alphabet/bcrypt.rs","byte_start":6574,"byte_end":6577,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/alphabet/bcrypt.rs","byte_start":6578,"byte_end":6589,"line_start":7,"line_end":7,"column_start":1,"column_end":12}},{"value":"/ ./         [A-Z]      [a-z]     [0-9]","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/alphabet/bcrypt.rs","byte_start":6590,"byte_end":6631,"line_start":8,"line_end":8,"column_start":1,"column_end":42}},{"value":"/ 0x2e-0x2f, 0x41-0x5a, 0x61-0x7a, 0x30-0x39","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/alphabet/bcrypt.rs","byte_start":6632,"byte_end":6678,"line_start":9,"line_end":9,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/alphabet/bcrypt.rs","byte_start":6679,"byte_end":6686,"line_start":10,"line_end":10,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":402},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/alphabet/crypt.rs","byte_start":7535,"byte_end":7546,"line_start":12,"line_end":12,"column_start":12,"column_end":23},"name":"Base64Crypt","qualname":"::alphabet::crypt::Base64Crypt","value":"","parent":null,"children":[],"decl_id":null,"docs":" `crypt(3)` Base64 encoding.","sig":null,"attributes":[{"value":"/ `crypt(3)` Base64 encoding.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/alphabet/crypt.rs","byte_start":7355,"byte_end":7386,"line_start":5,"line_end":5,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/alphabet/crypt.rs","byte_start":7387,"byte_end":7390,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/alphabet/crypt.rs","byte_start":7391,"byte_end":7402,"line_start":7,"line_end":7,"column_start":1,"column_end":12}},{"value":"/ [.-9]      [A-Z]      [a-z]","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/alphabet/crypt.rs","byte_start":7403,"byte_end":7434,"line_start":8,"line_end":8,"column_start":1,"column_end":32}},{"value":"/ 0x2e-0x39, 0x41-0x5a, 0x61-0x7a","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/alphabet/crypt.rs","byte_start":7435,"byte_end":7470,"line_start":9,"line_end":9,"column_start":1,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/alphabet/crypt.rs","byte_start":7471,"byte_end":7478,"line_start":10,"line_end":10,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":415},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/alphabet/standard.rs","byte_start":8267,"byte_end":8273,"line_start":12,"line_end":12,"column_start":12,"column_end":18},"name":"Base64","qualname":"::alphabet::standard::Base64","value":"","parent":null,"children":[],"decl_id":null,"docs":" Standard Base64 encoding with `=` padding.","sig":null,"attributes":[{"value":"/ Standard Base64 encoding with `=` padding.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/alphabet/standard.rs","byte_start":8047,"byte_end":8093,"line_start":5,"line_end":5,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/alphabet/standard.rs","byte_start":8094,"byte_end":8097,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/alphabet/standard.rs","byte_start":8098,"byte_end":8109,"line_start":7,"line_end":7,"column_start":1,"column_end":12}},{"value":"/ [A-Z]      [a-z]      [0-9]      +     /","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/alphabet/standard.rs","byte_start":8110,"byte_end":8154,"line_start":8,"line_end":8,"column_start":1,"column_end":45}},{"value":"/ 0x41-0x5a, 0x61-0x7a, 0x30-0x39, 0x2b, 0x2f","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/alphabet/standard.rs","byte_start":8155,"byte_end":8202,"line_start":9,"line_end":9,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/alphabet/standard.rs","byte_start":8203,"byte_end":8210,"line_start":10,"line_end":10,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":428},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/alphabet/standard.rs","byte_start":8725,"byte_end":8739,"line_start":29,"line_end":29,"column_start":12,"column_end":26},"name":"Base64Unpadded","qualname":"::alphabet::standard::Base64Unpadded","value":"","parent":null,"children":[],"decl_id":null,"docs":" Standard Base64 encoding *without* padding.","sig":null,"attributes":[{"value":"/ Standard Base64 encoding *without* padding.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/alphabet/standard.rs","byte_start":8504,"byte_end":8551,"line_start":22,"line_end":22,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/alphabet/standard.rs","byte_start":8552,"byte_end":8555,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/alphabet/standard.rs","byte_start":8556,"byte_end":8567,"line_start":24,"line_end":24,"column_start":1,"column_end":12}},{"value":"/ [A-Z]      [a-z]      [0-9]      +     /","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/alphabet/standard.rs","byte_start":8568,"byte_end":8612,"line_start":25,"line_end":25,"column_start":1,"column_end":45}},{"value":"/ 0x41-0x5a, 0x61-0x7a, 0x30-0x39, 0x2b, 0x2f","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/alphabet/standard.rs","byte_start":8613,"byte_end":8660,"line_start":26,"line_end":26,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/alphabet/standard.rs","byte_start":8661,"byte_end":8668,"line_start":27,"line_end":27,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":441},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/alphabet/url.rs","byte_start":9744,"byte_end":9753,"line_start":12,"line_end":12,"column_start":12,"column_end":21},"name":"Base64Url","qualname":"::alphabet::url::Base64Url","value":"","parent":null,"children":[],"decl_id":null,"docs":" URL-safe Base64 encoding with `=` padding.","sig":null,"attributes":[{"value":"/ URL-safe Base64 encoding with `=` padding.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/alphabet/url.rs","byte_start":9524,"byte_end":9570,"line_start":5,"line_end":5,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/alphabet/url.rs","byte_start":9571,"byte_end":9574,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/alphabet/url.rs","byte_start":9575,"byte_end":9586,"line_start":7,"line_end":7,"column_start":1,"column_end":12}},{"value":"/ [A-Z]      [a-z]      [0-9]      -     _","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/alphabet/url.rs","byte_start":9587,"byte_end":9631,"line_start":8,"line_end":8,"column_start":1,"column_end":45}},{"value":"/ 0x41-0x5a, 0x61-0x7a, 0x30-0x39, 0x2d, 0x5f","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/alphabet/url.rs","byte_start":9632,"byte_end":9679,"line_start":9,"line_end":9,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/alphabet/url.rs","byte_start":9680,"byte_end":9687,"line_start":10,"line_end":10,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":454},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/alphabet/url.rs","byte_start":10211,"byte_end":10228,"line_start":29,"line_end":29,"column_start":12,"column_end":29},"name":"Base64UrlUnpadded","qualname":"::alphabet::url::Base64UrlUnpadded","value":"","parent":null,"children":[],"decl_id":null,"docs":" URL-safe Base64 encoding *without* padding.","sig":null,"attributes":[{"value":"/ URL-safe Base64 encoding *without* padding.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/alphabet/url.rs","byte_start":9990,"byte_end":10037,"line_start":22,"line_end":22,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/alphabet/url.rs","byte_start":10038,"byte_end":10041,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/alphabet/url.rs","byte_start":10042,"byte_end":10053,"line_start":24,"line_end":24,"column_start":1,"column_end":12}},{"value":"/ [A-Z]      [a-z]      [0-9]      -     _","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/alphabet/url.rs","byte_start":10054,"byte_end":10098,"line_start":25,"line_end":25,"column_start":1,"column_end":45}},{"value":"/ 0x41-0x5a, 0x61-0x7a, 0x30-0x39, 0x2d, 0x5f","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/alphabet/url.rs","byte_start":10099,"byte_end":10146,"line_start":26,"line_end":26,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/alphabet/url.rs","byte_start":10147,"byte_end":10154,"line_start":27,"line_end":27,"column_start":1,"column_end":8}}]},{"kind":"Trait","id":{"krate":0,"index":97},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/alphabet.rs","byte_start":3026,"byte_end":3034,"line_start":14,"line_end":14,"column_start":11,"column_end":19},"name":"Alphabet","qualname":"::alphabet::Alphabet","value":"Alphabet: 'static + Copy + Debug + Eq + Send + Sized + Sync","parent":null,"children":[{"krate":0,"index":98},{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":101},{"krate":0,"index":102},{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":106}],"decl_id":null,"docs":" Core encoder/decoder functions for a particular Base64 alphabet.\n","sig":null,"attributes":[{"value":"/ Core encoder/decoder functions for a particular Base64 alphabet.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/alphabet.rs","byte_start":2947,"byte_end":3015,"line_start":13,"line_end":13,"column_start":1,"column_end":69}}]},{"kind":"Const","id":{"krate":0,"index":98},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/alphabet.rs","byte_start":3147,"byte_end":3151,"line_start":16,"line_end":16,"column_start":11,"column_end":15},"name":"BASE","qualname":"::alphabet::Alphabet::BASE","value":"u8","parent":{"krate":0,"index":97},"children":[],"decl_id":null,"docs":" First character in this Base64 alphabet.\n","sig":null,"attributes":[{"value":"/ First character in this Base64 alphabet.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/alphabet.rs","byte_start":3092,"byte_end":3136,"line_start":15,"line_end":15,"column_start":5,"column_end":49}}]},{"kind":"Const","id":{"krate":0,"index":99},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/alphabet.rs","byte_start":3191,"byte_end":3198,"line_start":19,"line_end":19,"column_start":11,"column_end":18},"name":"DECODER","qualname":"::alphabet::Alphabet::DECODER","value":"&'static [DecodeStep]","parent":{"krate":0,"index":97},"children":[],"decl_id":null,"docs":" Decoder passes\n","sig":null,"attributes":[{"value":"/ Decoder passes","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/alphabet.rs","byte_start":3162,"byte_end":3180,"line_start":18,"line_end":18,"column_start":5,"column_end":23}}]},{"kind":"Const","id":{"krate":0,"index":100},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/alphabet.rs","byte_start":3257,"byte_end":3264,"line_start":22,"line_end":22,"column_start":11,"column_end":18},"name":"ENCODER","qualname":"::alphabet::Alphabet::ENCODER","value":"&'static [EncodeStep]","parent":{"krate":0,"index":97},"children":[],"decl_id":null,"docs":" Encoder passes\n","sig":null,"attributes":[{"value":"/ Encoder passes","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/alphabet.rs","byte_start":3228,"byte_end":3246,"line_start":21,"line_end":21,"column_start":5,"column_end":23}}]},{"kind":"Const","id":{"krate":0,"index":101},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/alphabet.rs","byte_start":3333,"byte_end":3339,"line_start":25,"line_end":25,"column_start":11,"column_end":17},"name":"PADDED","qualname":"::alphabet::Alphabet::PADDED","value":"bool","parent":{"krate":0,"index":97},"children":[],"decl_id":null,"docs":" Is this encoding padded?\n","sig":null,"attributes":[{"value":"/ Is this encoding padded?","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/alphabet.rs","byte_start":3294,"byte_end":3322,"line_start":24,"line_end":24,"column_start":5,"column_end":33}}]},{"kind":"Type","id":{"krate":0,"index":102},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/alphabet.rs","byte_start":3489,"byte_end":3497,"line_start":30,"line_end":30,"column_start":10,"column_end":18},"name":"Unpadded","qualname":"::alphabet::Alphabet::Unpadded","value":"type Unpadded: Alphabet;","parent":{"krate":0,"index":97},"children":[],"decl_id":null,"docs":" Unpadded equivalent of this alphabet.","sig":null,"attributes":[{"value":"/ Unpadded equivalent of this alphabet.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/alphabet.rs","byte_start":3352,"byte_end":3393,"line_start":27,"line_end":27,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/alphabet.rs","byte_start":3398,"byte_end":3401,"line_start":28,"line_end":28,"column_start":5,"column_end":8}},{"value":"/ For alphabets that are unpadded to begin with, this should be `Self`.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/alphabet.rs","byte_start":3406,"byte_end":3479,"line_start":29,"line_end":29,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":103},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/alphabet.rs","byte_start":3583,"byte_end":3596,"line_start":34,"line_end":34,"column_start":8,"column_end":21},"name":"decode_3bytes","qualname":"::alphabet::Alphabet::decode_3bytes","value":"pub fn decode_3bytes(&[u8], &mut [u8]) -> i16","parent":{"krate":0,"index":97},"children":[],"decl_id":null,"docs":" Decode 3 bytes of a Base64 message.\n","sig":null,"attributes":[{"value":"/ Decode 3 bytes of a Base64 message.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/alphabet.rs","byte_start":3514,"byte_end":3553,"line_start":32,"line_end":32,"column_start":5,"column_end":44}},{"value":"inline(always)","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/alphabet.rs","byte_start":3558,"byte_end":3575,"line_start":33,"line_end":33,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/alphabet.rs","byte_start":4161,"byte_end":4173,"line_start":51,"line_end":51,"column_start":8,"column_end":20},"name":"decode_6bits","qualname":"::alphabet::Alphabet::decode_6bits","value":"pub fn decode_6bits(u8) -> i16","parent":{"krate":0,"index":97},"children":[],"decl_id":null,"docs":" Decode 6-bits of a Base64 message.\n","sig":null,"attributes":[{"value":"/ Decode 6-bits of a Base64 message.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/alphabet.rs","byte_start":4115,"byte_end":4153,"line_start":50,"line_end":50,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":105},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/alphabet.rs","byte_start":5002,"byte_end":5015,"line_start":75,"line_end":75,"column_start":8,"column_end":21},"name":"encode_3bytes","qualname":"::alphabet::Alphabet::encode_3bytes","value":"pub fn encode_3bytes(&[u8], &mut [u8])","parent":{"krate":0,"index":97},"children":[],"decl_id":null,"docs":" Encode 3-bytes of a Base64 message.\n","sig":null,"attributes":[{"value":"/ Encode 3-bytes of a Base64 message.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/alphabet.rs","byte_start":4933,"byte_end":4972,"line_start":73,"line_end":73,"column_start":5,"column_end":44}},{"value":"inline(always)","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/alphabet.rs","byte_start":4977,"byte_end":4994,"line_start":74,"line_end":74,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":106},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/alphabet.rs","byte_start":5560,"byte_end":5572,"line_start":91,"line_end":91,"column_start":8,"column_end":20},"name":"encode_6bits","qualname":"::alphabet::Alphabet::encode_6bits","value":"pub fn encode_6bits(i16) -> u8","parent":{"krate":0,"index":97},"children":[],"decl_id":null,"docs":" Encode 6-bits of a Base64 message.\n","sig":null,"attributes":[{"value":"/ Encode 6-bits of a Base64 message.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/alphabet.rs","byte_start":5492,"byte_end":5530,"line_start":89,"line_end":89,"column_start":5,"column_end":43}},{"value":"inline(always)","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/alphabet.rs","byte_start":5535,"byte_end":5552,"line_start":90,"line_end":90,"column_start":5,"column_end":22}}]},{"kind":"TupleVariant","id":{"krate":0,"index":468},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/alphabet.rs","byte_start":6097,"byte_end":6102,"line_start":109,"line_end":109,"column_start":5,"column_end":10},"name":"Range","qualname":"::alphabet::DecodeStep::Range","value":"DecodeStep::Range(Range<u8>, i16)","parent":{"krate":0,"index":467},"children":[],"decl_id":null,"docs":" Match the given range, offsetting the input on match.\n","sig":null,"attributes":[{"value":"/ Match the given range, offsetting the input on match.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/alphabet.rs","byte_start":6035,"byte_end":6092,"line_start":108,"line_end":108,"column_start":5,"column_end":62}}]},{"kind":"TupleVariant","id":{"krate":0,"index":472},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/alphabet.rs","byte_start":6198,"byte_end":6200,"line_start":112,"line_end":112,"column_start":5,"column_end":7},"name":"Eq","qualname":"::alphabet::DecodeStep::Eq","value":"DecodeStep::Eq(u8, i16)","parent":{"krate":0,"index":467},"children":[],"decl_id":null,"docs":" Match the given value, returning the associated offset on match.\n","sig":null,"attributes":[{"value":"/ Match the given value, returning the associated offset on match.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/alphabet.rs","byte_start":6125,"byte_end":6193,"line_start":111,"line_end":111,"column_start":5,"column_end":73}}]},{"kind":"Enum","id":{"krate":0,"index":467},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/alphabet.rs","byte_start":6018,"byte_end":6028,"line_start":107,"line_end":107,"column_start":10,"column_end":20},"name":"DecodeStep","qualname":"::alphabet::DecodeStep","value":"pub enum DecodeStep { Range(Range<u8>, i16), Eq(u8, i16), }","parent":null,"children":[{"krate":0,"index":468},{"krate":0,"index":472}],"decl_id":null,"docs":" Constant-time decoder step.\n","sig":null,"attributes":[{"value":"/ Constant-time decoder step.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/alphabet.rs","byte_start":5960,"byte_end":5991,"line_start":105,"line_end":105,"column_start":1,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":479},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/alphabet.rs","byte_start":6368,"byte_end":6373,"line_start":119,"line_end":119,"column_start":5,"column_end":10},"name":"Apply","qualname":"::alphabet::EncodeStep::Apply","value":"EncodeStep::Apply(u8, i16)","parent":{"krate":0,"index":478},"children":[],"decl_id":null,"docs":" Apply the given offset to the cumulative result on match.\n","sig":null,"attributes":[{"value":"/ Apply the given offset to the cumulative result on match.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/alphabet.rs","byte_start":6302,"byte_end":6363,"line_start":118,"line_end":118,"column_start":5,"column_end":66}}]},{"kind":"TupleVariant","id":{"krate":0,"index":483},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/alphabet.rs","byte_start":6451,"byte_end":6455,"line_start":122,"line_end":122,"column_start":5,"column_end":9},"name":"Diff","qualname":"::alphabet::EncodeStep::Diff","value":"EncodeStep::Diff(u8, i16)","parent":{"krate":0,"index":478},"children":[],"decl_id":null,"docs":" Compute a difference using the given offset on match.\n","sig":null,"attributes":[{"value":"/ Compute a difference using the given offset on match.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/alphabet.rs","byte_start":6389,"byte_end":6446,"line_start":121,"line_end":121,"column_start":5,"column_end":62}}]},{"kind":"Enum","id":{"krate":0,"index":478},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/alphabet.rs","byte_start":6285,"byte_end":6295,"line_start":117,"line_end":117,"column_start":10,"column_end":20},"name":"EncodeStep","qualname":"::alphabet::EncodeStep","value":"pub enum EncodeStep { Apply(u8, i16), Diff(u8, i16), }","parent":null,"children":[{"krate":0,"index":479},{"krate":0,"index":483}],"decl_id":null,"docs":" Constant-time encoder step.\n","sig":null,"attributes":[{"value":"/ Constant-time encoder step.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/alphabet.rs","byte_start":6214,"byte_end":6245,"line_start":115,"line_end":115,"column_start":1,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":492},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/decoder.rs","byte_start":11514,"byte_end":11521,"line_start":26,"line_end":26,"column_start":12,"column_end":19},"name":"Decoder","qualname":"::decoder::Decoder","value":"Decoder {  }","parent":null,"children":[{"krate":0,"index":495},{"krate":0,"index":496},{"krate":0,"index":497},{"krate":0,"index":498},{"krate":0,"index":499}],"decl_id":null,"docs":" Stateful Base64 decoder with support for buffered, incremental decoding.","sig":null,"attributes":[{"value":"/ Stateful Base64 decoder with support for buffered, incremental decoding.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/decoder.rs","byte_start":11291,"byte_end":11367,"line_start":21,"line_end":21,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/decoder.rs","byte_start":11368,"byte_end":11371,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ The `E` type parameter can be any type which impls [`Encoding`] such as","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/decoder.rs","byte_start":11372,"byte_end":11447,"line_start":23,"line_end":23,"column_start":1,"column_end":76}},{"value":"/ [`Base64`] or [`Base64Unpadded`].","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/decoder.rs","byte_start":11448,"byte_end":11485,"line_start":24,"line_end":24,"column_start":1,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":149},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/decoder.rs","byte_start":12233,"byte_end":12236,"line_start":50,"line_end":50,"column_start":12,"column_end":15},"name":"new","qualname":"<Decoder>::new","value":"pub fn new(&'i [u8]) -> Result<Self, Error>","parent":null,"children":[],"decl_id":null,"docs":" Create a new decoder for a byte slice containing contiguous\n (non-newline-delimited) Base64-encoded data.","sig":null,"attributes":[{"value":"/ Create a new decoder for a byte slice containing contiguous","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/decoder.rs","byte_start":11975,"byte_end":12038,"line_start":44,"line_end":44,"column_start":5,"column_end":68}},{"value":"/ (non-newline-delimited) Base64-encoded data.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/decoder.rs","byte_start":12043,"byte_end":12091,"line_start":45,"line_end":45,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/decoder.rs","byte_start":12096,"byte_end":12099,"line_start":46,"line_end":46,"column_start":5,"column_end":8}},{"value":"/ # Returns","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/decoder.rs","byte_start":12104,"byte_end":12117,"line_start":47,"line_end":47,"column_start":5,"column_end":18}},{"value":"/ - `Ok(decoder)` on success.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/decoder.rs","byte_start":12122,"byte_end":12153,"line_start":48,"line_end":48,"column_start":5,"column_end":36}},{"value":"/ - `Err(Error::InvalidLength)` if the input buffer is empty.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/decoder.rs","byte_start":12158,"byte_end":12221,"line_start":49,"line_end":49,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":150},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/decoder.rs","byte_start":13443,"byte_end":13454,"line_start":87,"line_end":87,"column_start":12,"column_end":23},"name":"new_wrapped","qualname":"<Decoder>::new_wrapped","value":"pub fn new_wrapped(&'i [u8], usize) -> Result<Self, Error>","parent":null,"children":[],"decl_id":null,"docs":" Create a new decoder for a byte slice containing Base64 which\n line wraps at the given line length.","sig":null,"attributes":[{"value":"/ Create a new decoder for a byte slice containing Base64 which","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/decoder.rs","byte_start":12614,"byte_end":12679,"line_start":63,"line_end":63,"column_start":5,"column_end":70}},{"value":"/ line wraps at the given line length.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/decoder.rs","byte_start":12684,"byte_end":12724,"line_start":64,"line_end":64,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/decoder.rs","byte_start":12729,"byte_end":12732,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ Trailing newlines are not supported and must be removed in advance.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/decoder.rs","byte_start":12737,"byte_end":12808,"line_start":66,"line_end":66,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/decoder.rs","byte_start":12813,"byte_end":12816,"line_start":67,"line_end":67,"column_start":5,"column_end":8}},{"value":"/ Newlines are handled according to what are roughly [RFC7468] conventions:","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/decoder.rs","byte_start":12821,"byte_end":12898,"line_start":68,"line_end":68,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/decoder.rs","byte_start":12903,"byte_end":12906,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/decoder.rs","byte_start":12911,"byte_end":12922,"line_start":70,"line_end":70,"column_start":5,"column_end":16}},{"value":"/ [parsers] MUST handle different newline conventions","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/decoder.rs","byte_start":12927,"byte_end":12982,"line_start":71,"line_end":71,"column_start":5,"column_end":60}},{"value":"/ ```","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/decoder.rs","byte_start":12987,"byte_end":12994,"line_start":72,"line_end":72,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/decoder.rs","byte_start":12999,"byte_end":13002,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ RFC7468 allows any of the following as newlines, and allows a mixture","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/decoder.rs","byte_start":13007,"byte_end":13080,"line_start":74,"line_end":74,"column_start":5,"column_end":78}},{"value":"/ of different types of newlines:","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/decoder.rs","byte_start":13085,"byte_end":13120,"line_start":75,"line_end":75,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/decoder.rs","byte_start":13125,"byte_end":13128,"line_start":76,"line_end":76,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/decoder.rs","byte_start":13133,"byte_end":13144,"line_start":77,"line_end":77,"column_start":5,"column_end":16}},{"value":"/ eol        = CRLF / CR / LF","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/decoder.rs","byte_start":13149,"byte_end":13180,"line_start":78,"line_end":78,"column_start":5,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/decoder.rs","byte_start":13185,"byte_end":13192,"line_start":79,"line_end":79,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/decoder.rs","byte_start":13197,"byte_end":13200,"line_start":80,"line_end":80,"column_start":5,"column_end":8}},{"value":"/ # Returns","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/decoder.rs","byte_start":13205,"byte_end":13218,"line_start":81,"line_end":81,"column_start":5,"column_end":18}},{"value":"/ - `Ok(decoder)` on success.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/decoder.rs","byte_start":13223,"byte_end":13254,"line_start":82,"line_end":82,"column_start":5,"column_end":36}},{"value":"/ - `Err(Error::InvalidLength)` if the input buffer is empty or the line","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/decoder.rs","byte_start":13259,"byte_end":13333,"line_start":83,"line_end":83,"column_start":5,"column_end":79}},{"value":"/   width is zero.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/decoder.rs","byte_start":13338,"byte_end":13358,"line_start":84,"line_end":84,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/decoder.rs","byte_start":13363,"byte_end":13366,"line_start":85,"line_end":85,"column_start":5,"column_end":8}},{"value":"/ [RFC7468]: https://datatracker.ietf.org/doc/html/rfc7468","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/decoder.rs","byte_start":13371,"byte_end":13431,"line_start":86,"line_end":86,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":151},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/decoder.rs","byte_start":14183,"byte_end":14189,"line_start":107,"line_end":107,"column_start":12,"column_end":18},"name":"decode","qualname":"<Decoder>::decode","value":"pub fn decode<'o>(&mut Self, &'o mut [u8]) -> Result<&'o [u8], Error>","parent":null,"children":[],"decl_id":null,"docs":" Fill the provided buffer with data decoded from Base64.","sig":null,"attributes":[{"value":"/ Fill the provided buffer with data decoded from Base64.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/decoder.rs","byte_start":13861,"byte_end":13920,"line_start":100,"line_end":100,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/decoder.rs","byte_start":13925,"byte_end":13928,"line_start":101,"line_end":101,"column_start":5,"column_end":8}},{"value":"/ Enough Base64 input data must remain to fill the entire buffer.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/decoder.rs","byte_start":13933,"byte_end":14000,"line_start":102,"line_end":102,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/decoder.rs","byte_start":14005,"byte_end":14008,"line_start":103,"line_end":103,"column_start":5,"column_end":8}},{"value":"/ # Returns","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/decoder.rs","byte_start":14013,"byte_end":14026,"line_start":104,"line_end":104,"column_start":5,"column_end":18}},{"value":"/ - `Ok(bytes)` if the expected amount of data was read","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/decoder.rs","byte_start":14031,"byte_end":14088,"line_start":105,"line_end":105,"column_start":5,"column_end":62}},{"value":"/ - `Err(Error::InvalidLength)` if the exact amount of data couldn't be read","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/decoder.rs","byte_start":14093,"byte_end":14171,"line_start":106,"line_end":106,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":153},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/decoder.rs","byte_start":16795,"byte_end":16808,"line_start":170,"line_end":170,"column_start":12,"column_end":25},"name":"decode_to_end","qualname":"<Decoder>::decode_to_end","value":"pub fn decode_to_end<'o>(&mut Self, &'o mut Vec<u8>)\n-> Result<&'o [u8], Error>","parent":null,"children":[],"decl_id":null,"docs":" Decode all remaining Base64 data, placing the result into `buf`.","sig":null,"attributes":[{"value":"/ Decode all remaining Base64 data, placing the result into `buf`.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/decoder.rs","byte_start":16521,"byte_end":16589,"line_start":164,"line_end":164,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/decoder.rs","byte_start":16594,"byte_end":16597,"line_start":165,"line_end":165,"column_start":5,"column_end":8}},{"value":"/ If successful, this function will return the total number of bytes","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/decoder.rs","byte_start":16602,"byte_end":16672,"line_start":166,"line_end":166,"column_start":5,"column_end":75}},{"value":"/ decoded into `buf`.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/decoder.rs","byte_start":16677,"byte_end":16700,"line_start":167,"line_end":167,"column_start":5,"column_end":28}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/decoder.rs","byte_start":16705,"byte_end":16730,"line_start":168,"line_end":168,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":155},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/decoder.rs","byte_start":17507,"byte_end":17520,"line_start":188,"line_end":188,"column_start":12,"column_end":25},"name":"remaining_len","qualname":"<Decoder>::remaining_len","value":"pub fn remaining_len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the length of the remaining data after Base64 decoding.","sig":null,"attributes":[{"value":"/ Get the length of the remaining data after Base64 decoding.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/decoder.rs","byte_start":17378,"byte_end":17441,"line_start":185,"line_end":185,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/decoder.rs","byte_start":17446,"byte_end":17449,"line_start":186,"line_end":186,"column_start":5,"column_end":8}},{"value":"/ Decreases every time data is decoded.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/decoder.rs","byte_start":17454,"byte_end":17495,"line_start":187,"line_end":187,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/decoder.rs","byte_start":17632,"byte_end":17643,"line_start":193,"line_end":193,"column_start":12,"column_end":23},"name":"is_finished","qualname":"<Decoder>::is_finished","value":"pub fn is_finished(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Has all of the input data been decoded?\n","sig":null,"attributes":[{"value":"/ Has all of the input data been decoded?","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/decoder.rs","byte_start":17577,"byte_end":17620,"line_start":192,"line_end":192,"column_start":5,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":220},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/encoder.rs","byte_start":31523,"byte_end":31530,"line_start":20,"line_end":20,"column_start":12,"column_end":19},"name":"Encoder","qualname":"::encoder::Encoder","value":"Encoder {  }","parent":null,"children":[{"krate":0,"index":223},{"krate":0,"index":224},{"krate":0,"index":225},{"krate":0,"index":226},{"krate":0,"index":227}],"decl_id":null,"docs":" Stateful Base64 encoder with support for buffered, incremental encoding.","sig":null,"attributes":[{"value":"/ Stateful Base64 encoder with support for buffered, incremental encoding.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/encoder.rs","byte_start":31317,"byte_end":31393,"line_start":16,"line_end":16,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/encoder.rs","byte_start":31394,"byte_end":31397,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ The `E` type parameter can be any type which impls [`Encoding`] such as","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/encoder.rs","byte_start":31398,"byte_end":31473,"line_start":18,"line_end":18,"column_start":1,"column_end":76}},{"value":"/ [`Base64`] or [`Base64Unpadded`].","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/encoder.rs","byte_start":31474,"byte_end":31511,"line_start":19,"line_end":19,"column_start":1,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":231},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/encoder.rs","byte_start":32170,"byte_end":32173,"line_start":42,"line_end":42,"column_start":12,"column_end":15},"name":"new","qualname":"<Encoder>::new","value":"pub fn new(&'o mut [u8]) -> Result<Self, Error>","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder which writes output to the given byte slice.","sig":null,"attributes":[{"value":"/ Create a new encoder which writes output to the given byte slice.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/encoder.rs","byte_start":32015,"byte_end":32084,"line_start":39,"line_end":39,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/encoder.rs","byte_start":32089,"byte_end":32092,"line_start":40,"line_end":40,"column_start":5,"column_end":8}},{"value":"/ Output constructed using this method is not line-wrapped.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/encoder.rs","byte_start":32097,"byte_end":32158,"line_start":41,"line_end":41,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":232},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/encoder.rs","byte_start":32854,"byte_end":32865,"line_start":64,"line_end":64,"column_start":12,"column_end":23},"name":"new_wrapped","qualname":"<Encoder>::new_wrapped","value":"pub fn new_wrapped(&'o mut [u8], usize, LineEnding) -> Result<Self, Error>","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder which writes line-wrapped output to the given byte\n slice.","sig":null,"attributes":[{"value":"/ Create a new encoder which writes line-wrapped output to the given byte","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/encoder.rs","byte_start":32504,"byte_end":32579,"line_start":56,"line_end":56,"column_start":5,"column_end":80}},{"value":"/ slice.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/encoder.rs","byte_start":32584,"byte_end":32594,"line_start":57,"line_end":57,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/encoder.rs","byte_start":32599,"byte_end":32602,"line_start":58,"line_end":58,"column_start":5,"column_end":8}},{"value":"/ Output will be wrapped at the specified interval, using the provided","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/encoder.rs","byte_start":32607,"byte_end":32679,"line_start":59,"line_end":59,"column_start":5,"column_end":77}},{"value":"/ line ending. Use [`LineEnding::default()`] to use the conventional line","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/encoder.rs","byte_start":32684,"byte_end":32759,"line_start":60,"line_end":60,"column_start":5,"column_end":80}},{"value":"/ ending for the target OS.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/encoder.rs","byte_start":32764,"byte_end":32793,"line_start":61,"line_end":61,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/encoder.rs","byte_start":32798,"byte_end":32801,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ Minimum allowed line width is 4.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/encoder.rs","byte_start":32806,"byte_end":32842,"line_start":63,"line_end":63,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":233},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/encoder.rs","byte_start":33390,"byte_end":33396,"line_start":79,"line_end":79,"column_start":12,"column_end":18},"name":"encode","qualname":"<Encoder>::encode","value":"pub fn encode(&mut Self, &[u8]) -> Result<(), Error>","parent":null,"children":[],"decl_id":null,"docs":" Encode the provided buffer as Base64, writing it to the output buffer.","sig":null,"attributes":[{"value":"/ Encode the provided buffer as Base64, writing it to the output buffer.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/encoder.rs","byte_start":33126,"byte_end":33200,"line_start":74,"line_end":74,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/encoder.rs","byte_start":33205,"byte_end":33208,"line_start":75,"line_end":75,"column_start":5,"column_end":8}},{"value":"/ # Returns","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/encoder.rs","byte_start":33213,"byte_end":33226,"line_start":76,"line_end":76,"column_start":5,"column_end":18}},{"value":"/ - `Ok(bytes)` if the expected amount of data was read","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/encoder.rs","byte_start":33231,"byte_end":33288,"line_start":77,"line_end":77,"column_start":5,"column_end":62}},{"value":"/ - `Err(Error::InvalidLength)` if there is insufficient space in the output buffer","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/encoder.rs","byte_start":33293,"byte_end":33378,"line_start":78,"line_end":78,"column_start":5,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":234},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/encoder.rs","byte_start":34672,"byte_end":34680,"line_start":114,"line_end":114,"column_start":12,"column_end":20},"name":"position","qualname":"<Encoder>::position","value":"pub fn position(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the position inside of the output buffer where the write cursor\n is currently located.\n","sig":null,"attributes":[{"value":"/ Get the position inside of the output buffer where the write cursor","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/encoder.rs","byte_start":34559,"byte_end":34630,"line_start":112,"line_end":112,"column_start":5,"column_end":76}},{"value":"/ is currently located.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/encoder.rs","byte_start":34635,"byte_end":34660,"line_start":113,"line_end":113,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":235},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/encoder.rs","byte_start":34812,"byte_end":34818,"line_start":119,"line_end":119,"column_start":12,"column_end":18},"name":"finish","qualname":"<Encoder>::finish","value":"pub fn finish(Self) -> Result<&'o str, Error>","parent":null,"children":[],"decl_id":null,"docs":" Finish encoding data, returning the resulting Base64 as a `str`.\n","sig":null,"attributes":[{"value":"/ Finish encoding data, returning the resulting Base64 as a `str`.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/encoder.rs","byte_start":34732,"byte_end":34800,"line_start":118,"line_end":118,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":237},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/encoder.rs","byte_start":35067,"byte_end":35088,"line_start":125,"line_end":125,"column_start":12,"column_end":33},"name":"finish_with_remaining","qualname":"<Encoder>::finish_with_remaining","value":"pub fn finish_with_remaining(Self) -> Result<(&'o str, &'o mut [u8]), Error>","parent":null,"children":[],"decl_id":null,"docs":" Finish encoding data, returning the resulting Base64 as a `str`\n along with the remaining space in the output buffer.\n","sig":null,"attributes":[{"value":"/ Finish encoding data, returning the resulting Base64 as a `str`","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/encoder.rs","byte_start":34927,"byte_end":34994,"line_start":123,"line_end":123,"column_start":5,"column_end":72}},{"value":"/ along with the remaining space in the output buffer.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/encoder.rs","byte_start":34999,"byte_end":35055,"line_start":124,"line_end":124,"column_start":5,"column_end":61}}]},{"kind":"Trait","id":{"krate":0,"index":278},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/encoding.rs","byte_start":43454,"byte_end":43462,"line_start":31,"line_end":31,"column_start":11,"column_end":19},"name":"Encoding","qualname":"::encoding::Encoding","value":"Encoding: Alphabet","parent":null,"children":[{"krate":0,"index":279},{"krate":0,"index":281},{"krate":0,"index":282},{"krate":0,"index":283},{"krate":0,"index":285},{"krate":0,"index":286}],"decl_id":null,"docs":" Base64 encoding trait.","sig":null,"attributes":[{"value":"/ Base64 encoding trait.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/encoding.rs","byte_start":42894,"byte_end":42920,"line_start":18,"line_end":18,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/encoding.rs","byte_start":42921,"byte_end":42924,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ This trait must be imported to make use of any Base64 alphabet defined","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/encoding.rs","byte_start":42925,"byte_end":42999,"line_start":20,"line_end":20,"column_start":1,"column_end":75}},{"value":"/ in this crate.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/encoding.rs","byte_start":43000,"byte_end":43018,"line_start":21,"line_end":21,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/encoding.rs","byte_start":43019,"byte_end":43022,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ The following encoding types impl this trait:","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/encoding.rs","byte_start":43023,"byte_end":43072,"line_start":23,"line_end":23,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/encoding.rs","byte_start":43073,"byte_end":43076,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ - [`Base64`]: standard Base64 encoding with `=` padding.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/encoding.rs","byte_start":43077,"byte_end":43137,"line_start":25,"line_end":25,"column_start":1,"column_end":61}},{"value":"/ - [`Base64Bcrypt`]: bcrypt Base64 encoding.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/encoding.rs","byte_start":43138,"byte_end":43185,"line_start":26,"line_end":26,"column_start":1,"column_end":48}},{"value":"/ - [`Base64Crypt`]: `crypt(3)` Base64 encoding.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/encoding.rs","byte_start":43186,"byte_end":43236,"line_start":27,"line_end":27,"column_start":1,"column_end":51}},{"value":"/ - [`Base64Unpadded`]: standard Base64 encoding *without* padding.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/encoding.rs","byte_start":43237,"byte_end":43306,"line_start":28,"line_end":28,"column_start":1,"column_end":70}},{"value":"/ - [`Base64Url`]: URL-safe Base64 encoding with `=` padding.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/encoding.rs","byte_start":43307,"byte_end":43370,"line_start":29,"line_end":29,"column_start":1,"column_end":64}},{"value":"/ - [`Base64UrlUnpadded`]: URL-safe Base64 encoding *without* padding.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/encoding.rs","byte_start":43371,"byte_end":43443,"line_start":30,"line_end":30,"column_start":1,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":279},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/encoding.rs","byte_start":43551,"byte_end":43557,"line_start":33,"line_end":33,"column_start":8,"column_end":14},"name":"decode","qualname":"::encoding::Encoding::decode","value":"pub fn decode<impl AsRef<[u8]>: AsRef<[u8]>>(impl AsRef<[u8]>, &mut [u8])\n-> Result<&[u8], Error>","parent":{"krate":0,"index":278},"children":[],"decl_id":null,"docs":" Decode a Base64 string into the provided destination buffer.\n","sig":null,"attributes":[{"value":"/ Decode a Base64 string into the provided destination buffer.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/encoding.rs","byte_start":43479,"byte_end":43543,"line_start":32,"line_end":32,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":281},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/encoding.rs","byte_start":43806,"byte_end":43821,"line_start":39,"line_end":39,"column_start":8,"column_end":23},"name":"decode_in_place","qualname":"::encoding::Encoding::decode_in_place","value":"pub fn decode_in_place(&mut [u8]) -> Result<&[u8], InvalidEncodingError>","parent":{"krate":0,"index":278},"children":[],"decl_id":null,"docs":" Decode a Base64 string in-place.","sig":null,"attributes":[{"value":"/ Decode a Base64 string in-place.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/encoding.rs","byte_start":43627,"byte_end":43663,"line_start":35,"line_end":35,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/encoding.rs","byte_start":43668,"byte_end":43671,"line_start":36,"line_end":36,"column_start":5,"column_end":8}},{"value":"/ NOTE: this method does not (yet) validate that padding is well-formed,","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/encoding.rs","byte_start":43676,"byte_end":43750,"line_start":37,"line_end":37,"column_start":5,"column_end":79}},{"value":"/ if the given Base64 encoding is padded.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/encoding.rs","byte_start":43755,"byte_end":43798,"line_start":38,"line_end":38,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":282},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/encoding.rs","byte_start":44020,"byte_end":44030,"line_start":44,"line_end":44,"column_start":8,"column_end":18},"name":"decode_vec","qualname":"::encoding::Encoding::decode_vec","value":"pub fn decode_vec(&str) -> Result<Vec<u8>, Error>","parent":{"krate":0,"index":278},"children":[],"decl_id":null,"docs":" Decode a Base64 string into a byte vector.\n","sig":null,"attributes":[{"value":"/ Decode a Base64 string into a byte vector.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/encoding.rs","byte_start":43883,"byte_end":43929,"line_start":41,"line_end":41,"column_start":5,"column_end":51}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/encoding.rs","byte_start":43934,"byte_end":43959,"line_start":42,"line_end":42,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":283},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/encoding.rs","byte_start":44253,"byte_end":44259,"line_start":50,"line_end":50,"column_start":8,"column_end":14},"name":"encode","qualname":"::encoding::Encoding::encode","value":"pub fn encode<'a>(&[u8], &'a mut [u8]) -> Result<&'a str, InvalidLengthError>","parent":{"krate":0,"index":278},"children":[],"decl_id":null,"docs":" Encode the input byte slice as Base64.","sig":null,"attributes":[{"value":"/ Encode the input byte slice as Base64.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/encoding.rs","byte_start":44076,"byte_end":44118,"line_start":46,"line_end":46,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/encoding.rs","byte_start":44123,"byte_end":44126,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ Writes the result into the provided destination slice, returning an","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/encoding.rs","byte_start":44131,"byte_end":44202,"line_start":48,"line_end":48,"column_start":5,"column_end":76}},{"value":"/ ASCII-encoded Base64 string value.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/encoding.rs","byte_start":44207,"byte_end":44245,"line_start":49,"line_end":49,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":285},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/encoding.rs","byte_start":44578,"byte_end":44591,"line_start":58,"line_end":58,"column_start":8,"column_end":21},"name":"encode_string","qualname":"::encoding::Encoding::encode_string","value":"pub fn encode_string(&[u8]) -> String","parent":{"krate":0,"index":278},"children":[],"decl_id":null,"docs":" Encode input byte slice into a [`String`] containing Base64.","sig":null,"attributes":[{"value":"/ Encode input byte slice into a [`String`] containing Base64.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/encoding.rs","byte_start":44340,"byte_end":44404,"line_start":52,"line_end":52,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/encoding.rs","byte_start":44409,"byte_end":44412,"line_start":53,"line_end":53,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/encoding.rs","byte_start":44417,"byte_end":44429,"line_start":54,"line_end":54,"column_start":5,"column_end":17}},{"value":"/ If `input` length is greater than `usize::MAX/4`.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/encoding.rs","byte_start":44434,"byte_end":44487,"line_start":55,"line_end":55,"column_start":5,"column_end":58}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/encoding.rs","byte_start":44492,"byte_end":44517,"line_start":56,"line_end":56,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":286},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/encoding.rs","byte_start":44792,"byte_end":44803,"line_start":63,"line_end":63,"column_start":8,"column_end":19},"name":"encoded_len","qualname":"::encoding::Encoding::encoded_len","value":"pub fn encoded_len(&[u8]) -> usize","parent":{"krate":0,"index":278},"children":[],"decl_id":null,"docs":" Get the length of Base64 produced by encoding the given bytes.","sig":null,"attributes":[{"value":"/ Get the length of Base64 produced by encoding the given bytes.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/encoding.rs","byte_start":44622,"byte_end":44688,"line_start":60,"line_end":60,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/encoding.rs","byte_start":44693,"byte_end":44696,"line_start":61,"line_end":61,"column_start":5,"column_end":8}},{"value":"/ WARNING: this function will return `0` for lengths greater than `usize::MAX/4`!","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/encoding.rs","byte_start":44701,"byte_end":44784,"line_start":62,"line_end":62,"column_start":5,"column_end":88}}]},{"kind":"Struct","id":{"krate":0,"index":547},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/errors.rs","byte_start":55551,"byte_end":55569,"line_start":10,"line_end":10,"column_start":12,"column_end":30},"name":"InvalidLengthError","qualname":"::errors::InvalidLengthError","value":"","parent":null,"children":[],"decl_id":null,"docs":" Insufficient output buffer length.\n","sig":null,"attributes":[{"value":"/ Insufficient output buffer length.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/errors.rs","byte_start":55456,"byte_end":55494,"line_start":8,"line_end":8,"column_start":1,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":560},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/errors.rs","byte_start":55916,"byte_end":55936,"line_start":23,"line_end":23,"column_start":12,"column_end":32},"name":"InvalidEncodingError","qualname":"::errors::InvalidEncodingError","value":"","parent":null,"children":[],"decl_id":null,"docs":" Invalid encoding of provided Base64 string.\n","sig":null,"attributes":[{"value":"/ Invalid encoding of provided Base64 string.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/errors.rs","byte_start":55812,"byte_end":55859,"line_start":21,"line_end":21,"column_start":1,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":574},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/errors.rs","byte_start":56384,"byte_end":56399,"line_start":38,"line_end":38,"column_start":5,"column_end":20},"name":"InvalidEncoding","qualname":"::errors::Error::InvalidEncoding","value":"Error::InvalidEncoding","parent":{"krate":0,"index":573},"children":[],"decl_id":null,"docs":" Invalid encoding of provided Base64 string.\n","sig":null,"attributes":[{"value":"/ Invalid encoding of provided Base64 string.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/errors.rs","byte_start":56332,"byte_end":56379,"line_start":37,"line_end":37,"column_start":5,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":576},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/errors.rs","byte_start":56449,"byte_end":56462,"line_start":41,"line_end":41,"column_start":5,"column_end":18},"name":"InvalidLength","qualname":"::errors::Error::InvalidLength","value":"Error::InvalidLength","parent":{"krate":0,"index":573},"children":[],"decl_id":null,"docs":" Insufficient output buffer length.\n","sig":null,"attributes":[{"value":"/ Insufficient output buffer length.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/errors.rs","byte_start":56406,"byte_end":56444,"line_start":40,"line_end":40,"column_start":5,"column_end":43}}]},{"kind":"Enum","id":{"krate":0,"index":573},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/errors.rs","byte_start":56320,"byte_end":56325,"line_start":36,"line_end":36,"column_start":10,"column_end":15},"name":"Error","qualname":"::errors::Error","value":"pub enum Error { InvalidEncoding, InvalidLength, }","parent":null,"children":[{"krate":0,"index":574},{"krate":0,"index":576}],"decl_id":null,"docs":" Generic error, union of [`InvalidLengthError`] and [`InvalidEncodingError`].\n","sig":null,"attributes":[{"value":"/ Generic error, union of [`InvalidLengthError`] and [`InvalidEncodingError`].","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/errors.rs","byte_start":56185,"byte_end":56265,"line_start":34,"line_end":34,"column_start":1,"column_end":81}}]},{"kind":"TupleVariant","id":{"krate":0,"index":590},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/line_ending.rs","byte_start":58075,"byte_end":58077,"line_start":17,"line_end":17,"column_start":5,"column_end":7},"name":"CR","qualname":"::line_ending::LineEnding::CR","value":"LineEnding::CR","parent":{"krate":0,"index":589},"children":[],"decl_id":null,"docs":" Carriage return: `\\r` (Pre-OS X Macintosh)\n","sig":null,"attributes":[{"value":"/ Carriage return: `\\r` (Pre-OS X Macintosh)","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/line_ending.rs","byte_start":58024,"byte_end":58070,"line_start":16,"line_end":16,"column_start":5,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":592},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/line_ending.rs","byte_start":58120,"byte_end":58122,"line_start":20,"line_end":20,"column_start":5,"column_end":7},"name":"LF","qualname":"::line_ending::LineEnding::LF","value":"LineEnding::LF","parent":{"krate":0,"index":589},"children":[],"decl_id":null,"docs":" Line feed: `\\n` (Unix OSes)\n","sig":null,"attributes":[{"value":"/ Line feed: `\\n` (Unix OSes)","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/line_ending.rs","byte_start":58084,"byte_end":58115,"line_start":19,"line_end":19,"column_start":5,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":594},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/line_ending.rs","byte_start":58183,"byte_end":58187,"line_start":23,"line_end":23,"column_start":5,"column_end":9},"name":"CRLF","qualname":"::line_ending::LineEnding::CRLF","value":"LineEnding::CRLF","parent":{"krate":0,"index":589},"children":[],"decl_id":null,"docs":" Carriage return + line feed: `\\r\\n` (Windows)\n","sig":null,"attributes":[{"value":"/ Carriage return + line feed: `\\r\\n` (Windows)","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/line_ending.rs","byte_start":58129,"byte_end":58178,"line_start":22,"line_end":22,"column_start":5,"column_end":54}}]},{"kind":"Enum","id":{"krate":0,"index":589},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/line_ending.rs","byte_start":58007,"byte_end":58017,"line_start":15,"line_end":15,"column_start":10,"column_end":20},"name":"LineEnding","qualname":"::line_ending::LineEnding","value":"pub enum LineEnding { CR, LF, CRLF, }","parent":null,"children":[{"krate":0,"index":590},{"krate":0,"index":592},{"krate":0,"index":594}],"decl_id":null,"docs":" Line endings: variants of newline characters that can be used with Base64.","sig":null,"attributes":[{"value":"/ Line endings: variants of newline characters that can be used with Base64.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/line_ending.rs","byte_start":57711,"byte_end":57789,"line_start":9,"line_end":9,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/line_ending.rs","byte_start":57790,"byte_end":57793,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ Use [`LineEnding::default`] to get an appropriate line ending for the","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/line_ending.rs","byte_start":57794,"byte_end":57867,"line_start":11,"line_end":11,"column_start":1,"column_end":74}},{"value":"/ current operating system.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/line_ending.rs","byte_start":57868,"byte_end":57897,"line_start":12,"line_end":12,"column_start":1,"column_end":30}},{"value":"allow(clippy :: upper_case_acronyms)","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/line_ending.rs","byte_start":57898,"byte_end":57935,"line_start":13,"line_end":13,"column_start":1,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":342},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/line_ending.rs","byte_start":58584,"byte_end":58592,"line_start":41,"line_end":41,"column_start":12,"column_end":20},"name":"as_bytes","qualname":"<LineEnding>::as_bytes","value":"pub fn as_bytes(Self) -> &'static [u8]","parent":null,"children":[],"decl_id":null,"docs":" Get the byte serialization of this [`LineEnding`].\n","sig":null,"attributes":[{"value":"/ Get the byte serialization of this [`LineEnding`].","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/line_ending.rs","byte_start":58518,"byte_end":58572,"line_start":40,"line_end":40,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":343},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/line_ending.rs","byte_start":58859,"byte_end":58862,"line_start":50,"line_end":50,"column_start":12,"column_end":15},"name":"len","qualname":"<LineEnding>::len","value":"pub fn len(Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the encoded length of this [`LineEnding`].\n","sig":null,"attributes":[{"value":"/ Get the encoded length of this [`LineEnding`].","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/line_ending.rs","byte_start":58797,"byte_end":58847,"line_start":49,"line_end":49,"column_start":5,"column_end":55}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/alphabet/bcrypt.rs","byte_start":6776,"byte_end":6788,"line_start":14,"line_end":14,"column_start":19,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":29}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/alphabet/crypt.rs","byte_start":7567,"byte_end":7578,"line_start":14,"line_end":14,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":42},{"krate":0,"index":43},{"krate":0,"index":44},{"krate":0,"index":45},{"krate":0,"index":46}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/alphabet/standard.rs","byte_start":8294,"byte_end":8300,"line_start":14,"line_end":14,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":63}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/alphabet/standard.rs","byte_start":8760,"byte_end":8774,"line_start":31,"line_end":31,"column_start":19,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":65},{"krate":0,"index":66},{"krate":0,"index":67},{"krate":0,"index":68},{"krate":0,"index":69}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/alphabet/url.rs","byte_start":9774,"byte_end":9783,"line_start":14,"line_end":14,"column_start":19,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":84},{"krate":0,"index":85},{"krate":0,"index":86},{"krate":0,"index":87},{"krate":0,"index":88}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/alphabet/url.rs","byte_start":10249,"byte_end":10266,"line_start":31,"line_end":31,"column_start":19,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":90},{"krate":0,"index":91},{"krate":0,"index":92},{"krate":0,"index":93},{"krate":0,"index":94}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/decoder.rs","byte_start":11954,"byte_end":11961,"line_start":43,"line_end":43,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":149},{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":153},{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":160},{"krate":0,"index":161}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/decoder.rs","byte_start":20610,"byte_end":20621,"line_start":290,"line_end":290,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":164},{"krate":0,"index":165},{"krate":0,"index":166},{"krate":0,"index":167}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/decoder.rs","byte_start":22123,"byte_end":22127,"line_start":338,"line_end":338,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":170}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/decoder.rs","byte_start":22202,"byte_end":22206,"line_start":344,"line_end":344,"column_start":10,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":173},{"krate":0,"index":174},{"krate":0,"index":175},{"krate":0,"index":176},{"krate":0,"index":177},{"krate":0,"index":178}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/decoder.rs","byte_start":23697,"byte_end":23707,"line_start":399,"line_end":399,"column_start":10,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":181},{"krate":0,"index":182},{"krate":0,"index":183},{"krate":0,"index":184}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/decoder.rs","byte_start":27489,"byte_end":27499,"line_start":499,"line_end":499,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":190},{"krate":0,"index":191}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/encoder.rs","byte_start":31994,"byte_end":32001,"line_start":38,"line_end":38,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":231},{"krate":0,"index":232},{"krate":0,"index":233},{"krate":0,"index":234},{"krate":0,"index":235},{"krate":0,"index":237},{"krate":0,"index":238},{"krate":0,"index":239},{"krate":0,"index":240}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/encoder.rs","byte_start":37271,"byte_end":37282,"line_start":194,"line_end":194,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":242},{"krate":0,"index":243},{"krate":0,"index":244},{"krate":0,"index":246},{"krate":0,"index":247}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/encoder.rs","byte_start":38671,"byte_end":38682,"line_start":241,"line_end":241,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":249},{"krate":0,"index":250},{"krate":0,"index":251}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/encoding.rs","byte_start":44862,"byte_end":44863,"line_start":66,"line_end":66,"column_start":32,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":289},{"krate":0,"index":293},{"krate":0,"index":299},{"krate":0,"index":300},{"krate":0,"index":305},{"krate":0,"index":306}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/errors.rs","byte_start":55594,"byte_end":55612,"line_start":12,"line_end":12,"column_start":23,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":325}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/errors.rs","byte_start":55961,"byte_end":55981,"line_start":25,"line_end":25,"column_start":23,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":327}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/errors.rs","byte_start":56489,"byte_end":56494,"line_start":44,"line_end":44,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":329}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/errors.rs","byte_start":56793,"byte_end":56798,"line_start":54,"line_end":54,"column_start":37,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":331}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/errors.rs","byte_start":56937,"byte_end":56942,"line_start":61,"line_end":61,"column_start":35,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":333}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/errors.rs","byte_start":57079,"byte_end":57084,"line_start":68,"line_end":68,"column_start":37,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":335}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/line_ending.rs","byte_start":58209,"byte_end":58219,"line_start":26,"line_end":26,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":340}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/line_ending.rs","byte_start":58501,"byte_end":58511,"line_start":39,"line_end":39,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":342},{"krate":0,"index":343}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/alphabet/bcrypt.rs","byte_start":6776,"byte_end":6788,"line_start":14,"line_end":14,"column_start":19,"column_end":31},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":389},"to":{"krate":0,"index":97}},{"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/alphabet/crypt.rs","byte_start":7567,"byte_end":7578,"line_start":14,"line_end":14,"column_start":19,"column_end":30},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":402},"to":{"krate":0,"index":97}},{"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/alphabet/standard.rs","byte_start":8294,"byte_end":8300,"line_start":14,"line_end":14,"column_start":19,"column_end":25},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":415},"to":{"krate":0,"index":97}},{"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/alphabet/standard.rs","byte_start":8760,"byte_end":8774,"line_start":31,"line_end":31,"column_start":19,"column_end":33},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":428},"to":{"krate":0,"index":97}},{"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/alphabet/url.rs","byte_start":9774,"byte_end":9783,"line_start":14,"line_end":14,"column_start":19,"column_end":28},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":441},"to":{"krate":0,"index":97}},{"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/alphabet/url.rs","byte_start":10249,"byte_end":10266,"line_start":31,"line_end":31,"column_start":19,"column_end":36},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":454},"to":{"krate":0,"index":97}},{"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/alphabet.rs","byte_start":3046,"byte_end":3050,"line_start":14,"line_end":14,"column_start":31,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":3067},"to":{"krate":0,"index":97}},{"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/alphabet.rs","byte_start":3053,"byte_end":3058,"line_start":14,"line_end":14,"column_start":38,"column_end":43},"kind":"SuperTrait","from":{"krate":1,"index":9678},"to":{"krate":0,"index":97}},{"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/alphabet.rs","byte_start":3061,"byte_end":3063,"line_start":14,"line_end":14,"column_start":46,"column_end":48},"kind":"SuperTrait","from":{"krate":1,"index":2714},"to":{"krate":0,"index":97}},{"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/alphabet.rs","byte_start":3066,"byte_end":3070,"line_start":14,"line_end":14,"column_start":51,"column_end":55},"kind":"SuperTrait","from":{"krate":1,"index":3057},"to":{"krate":0,"index":97}},{"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/alphabet.rs","byte_start":3073,"byte_end":3078,"line_start":14,"line_end":14,"column_start":58,"column_end":63},"kind":"SuperTrait","from":{"krate":1,"index":3062},"to":{"krate":0,"index":97}},{"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/alphabet.rs","byte_start":3081,"byte_end":3085,"line_start":14,"line_end":14,"column_start":66,"column_end":70},"kind":"SuperTrait","from":{"krate":1,"index":3069},"to":{"krate":0,"index":97}},{"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/decoder.rs","byte_start":11954,"byte_end":11961,"line_start":43,"line_end":43,"column_start":23,"column_end":30},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":492},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/decoder.rs","byte_start":20610,"byte_end":20621,"line_start":290,"line_end":290,"column_start":6,"column_end":17},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":504},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/decoder.rs","byte_start":22123,"byte_end":22127,"line_start":338,"line_end":338,"column_start":22,"column_end":26},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":515},"to":{"krate":1,"index":3035}},{"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/decoder.rs","byte_start":22202,"byte_end":22206,"line_start":344,"line_end":344,"column_start":10,"column_end":14},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":515},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/decoder.rs","byte_start":23697,"byte_end":23707,"line_start":399,"line_end":399,"column_start":10,"column_end":20},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":524},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/decoder.rs","byte_start":27489,"byte_end":27499,"line_start":499,"line_end":499,"column_start":23,"column_end":33},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":524},"to":{"krate":1,"index":7978}},{"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/encoder.rs","byte_start":31994,"byte_end":32001,"line_start":38,"line_end":38,"column_start":23,"column_end":30},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":220},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/encoder.rs","byte_start":37271,"byte_end":37282,"line_start":194,"line_end":194,"column_start":6,"column_end":17},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":531},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/encoder.rs","byte_start":38671,"byte_end":38682,"line_start":241,"line_end":241,"column_start":6,"column_end":17},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":541},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/encoding.rs","byte_start":43464,"byte_end":43472,"line_start":31,"line_end":31,"column_start":21,"column_end":29},"kind":"SuperTrait","from":{"krate":0,"index":97},"to":{"krate":0,"index":278}},{"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/encoding.rs","byte_start":44862,"byte_end":44863,"line_start":66,"line_end":66,"column_start":32,"column_end":33},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":288},"to":{"krate":0,"index":278}},{"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/errors.rs","byte_start":55594,"byte_end":55612,"line_start":12,"line_end":12,"column_start":23,"column_end":41},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":547},"to":{"krate":1,"index":9685}},{"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/errors.rs","byte_start":55961,"byte_end":55981,"line_start":25,"line_end":25,"column_start":23,"column_end":43},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":560},"to":{"krate":1,"index":9685}},{"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/errors.rs","byte_start":56489,"byte_end":56494,"line_start":44,"line_end":44,"column_start":23,"column_end":28},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":573},"to":{"krate":1,"index":9685}},{"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/errors.rs","byte_start":56793,"byte_end":56798,"line_start":54,"line_end":54,"column_start":37,"column_end":42},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":573},"to":{"krate":1,"index":2963}},{"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/errors.rs","byte_start":56937,"byte_end":56942,"line_start":61,"line_end":61,"column_start":35,"column_end":40},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":573},"to":{"krate":1,"index":2963}},{"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/errors.rs","byte_start":57079,"byte_end":57084,"line_start":68,"line_end":68,"column_start":37,"column_end":42},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":573},"to":{"krate":1,"index":2963}},{"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/line_ending.rs","byte_start":58209,"byte_end":58219,"line_start":26,"line_end":26,"column_start":18,"column_end":28},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":589},"to":{"krate":1,"index":3035}},{"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.1/src/line_ending.rs","byte_start":58501,"byte_end":58511,"line_start":39,"line_end":39,"column_start":6,"column_end":16},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":589},"to":{"krate":4294967295,"index":4294967295}}]}