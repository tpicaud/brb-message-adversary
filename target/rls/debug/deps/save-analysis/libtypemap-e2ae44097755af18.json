{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3","program":"/home/tpicaud/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","typemap","/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=e2ae44097755af18","-C","extra-filename=-e2ae44097755af18","--out-dir","/home/tpicaud/Documents/Workspace/Rust/brb-msg-adversary/target/rls/debug/deps","-L","dependency=/home/tpicaud/Documents/Workspace/Rust/brb-msg-adversary/target/rls/debug/deps","--extern","unsafe_any=/home/tpicaud/Documents/Workspace/Rust/brb-msg-adversary/target/rls/debug/deps/libunsafe_any-caf0fd462148579c.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/tpicaud/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/tpicaud/Documents/Workspace/Rust/brb-msg-adversary/target/rls/debug/deps/libtypemap-e2ae44097755af18.rmeta"},"prelude":{"crate_id":{"name":"typemap","disambiguator":[8811568045925912881,0]},"crate_root":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src","external_crates":[{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[266559774140218402,0]}},{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[11763967750977672065,0]}},{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[10106063140927293834,0]}},{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[7335734036341381276,0]}},{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[6464017807659102018,0]}},{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[308958561119313021,0]}},{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[16887813381474488870,0]}},{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[18138047136180876386,0]}},{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","num":9,"id":{"name":"miniz_oxide","disambiguator":[16720472299414307338,0]}},{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[5531791840279234689,0]}},{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","num":11,"id":{"name":"adler","disambiguator":[2995214285932701362,0]}},{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[17222063258158154566,0]}},{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","num":13,"id":{"name":"std_detect","disambiguator":[7245893233601562531,0]}},{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","num":14,"id":{"name":"rustc_demangle","disambiguator":[4839492760463372304,0]}},{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","num":15,"id":{"name":"addr2line","disambiguator":[1226649225884195013,0]}},{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","num":16,"id":{"name":"gimli","disambiguator":[12460504831400488231,0]}},{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","num":17,"id":{"name":"object","disambiguator":[2536915343129323536,0]}},{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","num":18,"id":{"name":"memchr","disambiguator":[4342342869490546433,0]}},{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","num":19,"id":{"name":"panic_unwind","disambiguator":[2139538778087984071,0]}},{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","num":20,"id":{"name":"unsafe_any","disambiguator":[7013928185507571416,0]}},{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","num":21,"id":{"name":"traitobject","disambiguator":[9790107077263134335,0]}}],"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":0,"byte_end":11271,"line_start":1,"line_end":352,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":160},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":340,"byte_end":348,"line_start":14,"line_end":14,"column_start":21,"column_end":29},"alias_span":null,"name":"CloneAny","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":153},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":350,"byte_end":358,"line_start":14,"line_end":14,"column_start":31,"column_end":39},"alias_span":null,"name":"DebugAny","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":0,"byte_end":11271,"line_start":1,"line_end":352,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":8},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":15},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":22},{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":39},{"krate":0,"index":42},{"krate":0,"index":219},{"krate":0,"index":222},{"krate":0,"index":225},{"krate":0,"index":45},{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":52},{"krate":0,"index":53},{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":67},{"krate":0,"index":69},{"krate":0,"index":71},{"krate":0,"index":96},{"krate":0,"index":106},{"krate":0,"index":113},{"krate":0,"index":119},{"krate":0,"index":125},{"krate":0,"index":134},{"krate":0,"index":139}],"decl_id":null,"docs":" A type-based key value store where one value type is allowed for each key.\n","sig":null,"attributes":[{"value":"deny(missing_docs, warnings)","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":0,"byte_end":32,"line_start":1,"line_end":1,"column_start":1,"column_end":33}},{"value":"/ A type-based key value store where one value type is allowed for each key.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":34,"byte_end":112,"line_start":3,"line_end":3,"column_start":1,"column_end":79}}]},{"kind":"Struct","id":{"krate":0,"index":219},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":787,"byte_end":794,"line_start":27,"line_end":27,"column_start":12,"column_end":19},"name":"TypeMap","qualname":"::TypeMap","value":"TypeMap {  }","parent":null,"children":[{"krate":0,"index":221}],"decl_id":null,"docs":" A map keyed by types.","sig":null,"attributes":[{"value":"/ A map keyed by types.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":389,"byte_end":414,"line_start":17,"line_end":17,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":415,"byte_end":418,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ Can contain one value of any type for each key type, as defined","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":419,"byte_end":486,"line_start":19,"line_end":19,"column_start":1,"column_end":68}},{"value":"/ by the Assoc trait.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":487,"byte_end":510,"line_start":20,"line_end":20,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":511,"byte_end":514,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ You usually do not need to worry about the A type parameter, but it","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":515,"byte_end":586,"line_start":22,"line_end":22,"column_start":1,"column_end":72}},{"value":"/ can be used to add bounds to the possible value types that can","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":587,"byte_end":653,"line_start":23,"line_end":23,"column_start":1,"column_end":67}},{"value":"/ be stored in this map. Usually, you are looking for `ShareMap`, which","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":654,"byte_end":727,"line_start":24,"line_end":24,"column_start":1,"column_end":74}},{"value":"/ is `Send + Sync`.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":728,"byte_end":749,"line_start":25,"line_end":25,"column_start":1,"column_end":22}}]},{"kind":"Type","id":{"krate":0,"index":48},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":1148,"byte_end":1155,"line_start":40,"line_end":40,"column_start":10,"column_end":17},"name":"SendMap","qualname":"::SendMap","value":"TypeMap<UnsafeAny + Send>","parent":null,"children":[],"decl_id":null,"docs":" A version of `TypeMap` containing only `Send` types.\n","sig":null,"attributes":[{"value":"/ A version of `TypeMap` containing only `Send` types.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":1082,"byte_end":1138,"line_start":39,"line_end":39,"column_start":1,"column_end":57}}]},{"kind":"Type","id":{"krate":0,"index":49},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":1252,"byte_end":1259,"line_start":43,"line_end":43,"column_start":10,"column_end":17},"name":"SyncMap","qualname":"::SyncMap","value":"TypeMap<UnsafeAny + Sync>","parent":null,"children":[],"decl_id":null,"docs":" A version of `TypeMap` containing only `Sync` types.\n","sig":null,"attributes":[{"value":"/ A version of `TypeMap` containing only `Sync` types.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":1186,"byte_end":1242,"line_start":42,"line_end":42,"column_start":1,"column_end":57}}]},{"kind":"Type","id":{"krate":0,"index":50},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":1363,"byte_end":1371,"line_start":46,"line_end":46,"column_start":10,"column_end":18},"name":"ShareMap","qualname":"::ShareMap","value":"TypeMap<UnsafeAny + Send + Sync>","parent":null,"children":[],"decl_id":null,"docs":" A version of `TypeMap` containing only `Send + Sync` types.\n","sig":null,"attributes":[{"value":"/ A version of `TypeMap` containing only `Send + Sync` types.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":1290,"byte_end":1353,"line_start":45,"line_end":45,"column_start":1,"column_end":64}}]},{"kind":"Type","id":{"krate":0,"index":51},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":1476,"byte_end":1484,"line_start":49,"line_end":49,"column_start":10,"column_end":18},"name":"CloneMap","qualname":"::CloneMap","value":"TypeMap<CloneAny>","parent":null,"children":[],"decl_id":null,"docs":" A version of `TypeMap` containing only `Clone` types.\n","sig":null,"attributes":[{"value":"/ A version of `TypeMap` containing only `Clone` types.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":1409,"byte_end":1466,"line_start":48,"line_end":48,"column_start":1,"column_end":58}}]},{"kind":"Type","id":{"krate":0,"index":52},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":1588,"byte_end":1601,"line_start":52,"line_end":52,"column_start":10,"column_end":23},"name":"ShareCloneMap","qualname":"::ShareCloneMap","value":"TypeMap<CloneAny + Send + Sync>","parent":null,"children":[],"decl_id":null,"docs":" A version of `TypeMap` containing only `Clone + Send + Sync` types.\n","sig":null,"attributes":[{"value":"/ A version of `TypeMap` containing only `Clone + Send + Sync` types.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":1507,"byte_end":1578,"line_start":51,"line_end":51,"column_start":1,"column_end":72}}]},{"kind":"Type","id":{"krate":0,"index":53},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":1705,"byte_end":1713,"line_start":55,"line_end":55,"column_start":10,"column_end":18},"name":"DebugMap","qualname":"::DebugMap","value":"TypeMap<DebugAny>","parent":null,"children":[],"decl_id":null,"docs":" A version of `TypeMap` containing only `Debug` types.\n","sig":null,"attributes":[{"value":"/ A version of `TypeMap` containing only `Debug` types.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":1638,"byte_end":1695,"line_start":54,"line_end":54,"column_start":1,"column_end":58}}]},{"kind":"Type","id":{"krate":0,"index":54},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":1817,"byte_end":1830,"line_start":58,"line_end":58,"column_start":10,"column_end":23},"name":"ShareDebugMap","qualname":"::ShareDebugMap","value":"TypeMap<DebugAny + Send + Sync>","parent":null,"children":[],"decl_id":null,"docs":" A version of `TypeMap` containing only `Debug + Send + Sync` types.\n","sig":null,"attributes":[{"value":"/ A version of `TypeMap` containing only `Debug + Send + Sync` types.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":1736,"byte_end":1807,"line_start":57,"line_end":57,"column_start":1,"column_end":72}}]},{"kind":"Trait","id":{"krate":0,"index":67},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":2485,"byte_end":2488,"line_start":80,"line_end":80,"column_start":11,"column_end":14},"name":"Key","qualname":"::Key","value":"Key: Any","parent":null,"children":[{"krate":0,"index":68}],"decl_id":null,"docs":" This trait defines the relationship between keys and values in a TypeMap.","sig":null,"attributes":[{"value":"/ This trait defines the relationship between keys and values in a TypeMap.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":2314,"byte_end":2391,"line_start":77,"line_end":77,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":2392,"byte_end":2395,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ It is implemented for Keys, with a phantom associated type for the values.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":2396,"byte_end":2474,"line_start":79,"line_end":79,"column_start":1,"column_end":79}}]},{"kind":"Type","id":{"krate":0,"index":68},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":2559,"byte_end":2564,"line_start":82,"line_end":82,"column_start":10,"column_end":15},"name":"Value","qualname":"::Key::Value","value":"type Value: Any;","parent":{"krate":0,"index":67},"children":[],"decl_id":null,"docs":" The value type associated with this key type.\n","sig":null,"attributes":[{"value":"/ The value type associated with this key type.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":2500,"byte_end":2549,"line_start":81,"line_end":81,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":2637,"byte_end":2640,"line_start":87,"line_end":87,"column_start":12,"column_end":15},"name":"new","qualname":"<TypeMap>::new","value":"pub fn new() -> TypeMap","parent":null,"children":[],"decl_id":null,"docs":" Create a new, empty TypeMap.\n","sig":null,"attributes":[{"value":"/ Create a new, empty TypeMap.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":2593,"byte_end":2625,"line_start":86,"line_end":86,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":2934,"byte_end":2940,"line_start":97,"line_end":97,"column_start":12,"column_end":18},"name":"custom","qualname":"<TypeMap<A>>::custom","value":"pub fn custom() -> TypeMap<A>","parent":null,"children":[],"decl_id":null,"docs":" Create a new, empty TypeMap.","sig":null,"attributes":[{"value":"/ Create a new, empty TypeMap.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":2739,"byte_end":2771,"line_start":93,"line_end":93,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":2776,"byte_end":2779,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ Can be used with any `A` parameter; `new` is specialized to get around","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":2784,"byte_end":2858,"line_start":95,"line_end":95,"column_start":5,"column_end":79}},{"value":"/ the required type annotations when using this function.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":2863,"byte_end":2922,"line_start":96,"line_end":96,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":74},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":3101,"byte_end":3107,"line_start":104,"line_end":104,"column_start":12,"column_end":18},"name":"insert","qualname":"<TypeMap<A>>::insert","value":"pub fn insert<K: Key>(&mut Self, K::Value) -> Option<K::Value> where\nK::Value: Any + Implements<A>","parent":null,"children":[],"decl_id":null,"docs":" Insert a value into the map with a specified key type.\n","sig":null,"attributes":[{"value":"/ Insert a value into the map with a specified key type.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":3031,"byte_end":3089,"line_start":103,"line_end":103,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":77},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":3420,"byte_end":3423,"line_start":112,"line_end":112,"column_start":12,"column_end":15},"name":"get","qualname":"<TypeMap<A>>::get","value":"pub fn get<K: Key>(&Self) -> Option<&K::Value> where K::Value: Any +\nImplements<A>","parent":null,"children":[],"decl_id":null,"docs":" Find a value in the map and get a reference to it.\n","sig":null,"attributes":[{"value":"/ Find a value in the map and get a reference to it.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":3354,"byte_end":3408,"line_start":111,"line_end":111,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":80},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":3708,"byte_end":3715,"line_start":120,"line_end":120,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<TypeMap<A>>::get_mut","value":"pub fn get_mut<K: Key>(&mut Self) -> Option<&mut K::Value> where\nK::Value: Any + Implements<A>","parent":null,"children":[],"decl_id":null,"docs":" Find a value in the map and get a mutable reference to it.\n","sig":null,"attributes":[{"value":"/ Find a value in the map and get a mutable reference to it.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":3634,"byte_end":3696,"line_start":119,"line_end":119,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":83},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":4011,"byte_end":4019,"line_start":128,"line_end":128,"column_start":12,"column_end":20},"name":"contains","qualname":"<TypeMap<A>>::contains","value":"pub fn contains<K: Key>(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if a key has an associated value stored in the map.\n","sig":null,"attributes":[{"value":"/ Check if a key has an associated value stored in the map.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":3938,"byte_end":3999,"line_start":127,"line_end":127,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":85},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":4206,"byte_end":4212,"line_start":135,"line_end":135,"column_start":12,"column_end":18},"name":"remove","qualname":"<TypeMap<A>>::remove","value":"pub fn remove<K: Key>(&mut Self) -> Option<K::Value> where K::Value: Any +\nImplements<A>","parent":null,"children":[],"decl_id":null,"docs":" Remove a value from the map.","sig":null,"attributes":[{"value":"/ Remove a value from the map.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":4107,"byte_end":4139,"line_start":132,"line_end":132,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":4144,"byte_end":4147,"line_start":133,"line_end":133,"column_start":5,"column_end":8}},{"value":"/ Returns `true` if a value was removed.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":4152,"byte_end":4194,"line_start":134,"line_end":134,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":88},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":4519,"byte_end":4524,"line_start":143,"line_end":143,"column_start":12,"column_end":17},"name":"entry","qualname":"<TypeMap<A>>::entry","value":"pub fn entry<'a, K: Key>(&'a mut Self) -> Entry where K::Value: Any +\nImplements<A>","parent":null,"children":[],"decl_id":null,"docs":" Get the given key's corresponding entry in the map for in-place manipulation.\n","sig":null,"attributes":[{"value":"/ Get the given key's corresponding entry in the map for in-place manipulation.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":4426,"byte_end":4507,"line_start":142,"line_end":142,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":91},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":4933,"byte_end":4937,"line_start":152,"line_end":152,"column_start":19,"column_end":23},"name":"data","qualname":"<TypeMap<A>>::data","value":"pub unsafe fn data(&Self) -> &HashMap<TypeId, Box<A>>","parent":null,"children":[],"decl_id":null,"docs":" Read the underlying HashMap\n","sig":null,"attributes":[{"value":"/ Read the underlying HashMap","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":4883,"byte_end":4914,"line_start":151,"line_end":151,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":92},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":5077,"byte_end":5085,"line_start":157,"line_end":157,"column_start":19,"column_end":27},"name":"data_mut","qualname":"<TypeMap<A>>::data_mut","value":"pub unsafe fn data_mut(&mut Self) -> &mut HashMap<TypeId, Box<A>>","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to the underlying HashMap\n","sig":null,"attributes":[{"value":"/ Get a mutable reference to the underlying HashMap","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":5005,"byte_end":5058,"line_start":156,"line_end":156,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":93},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":5224,"byte_end":5227,"line_start":162,"line_end":162,"column_start":12,"column_end":15},"name":"len","qualname":"<TypeMap<A>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the number of values stored in the map.\n","sig":null,"attributes":[{"value":"/ Get the number of values stored in the map.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":5165,"byte_end":5212,"line_start":161,"line_end":161,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":94},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":5339,"byte_end":5347,"line_start":167,"line_end":167,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<TypeMap<A>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if the map contains no values.\n","sig":null,"attributes":[{"value":"/ Return true if the map contains no values.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":5281,"byte_end":5327,"line_start":166,"line_end":166,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":95},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":5453,"byte_end":5458,"line_start":172,"line_end":172,"column_start":12,"column_end":17},"name":"clear","qualname":"<TypeMap<A>>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Remove all entries from the map.\n","sig":null,"attributes":[{"value":"/ Remove all entries from the map.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":5405,"byte_end":5441,"line_start":171,"line_end":171,"column_start":5,"column_end":41}}]},{"kind":"TupleVariant","id":{"krate":0,"index":100},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":5669,"byte_end":5677,"line_start":180,"line_end":180,"column_start":5,"column_end":13},"name":"Occupied","qualname":"::Entry::Occupied","value":"Entry::Occupied(OccupiedEntry)","parent":{"krate":0,"index":96},"children":[],"decl_id":null,"docs":" A view onto an occupied entry in a TypeMap.\n","sig":null,"attributes":[{"value":"/ A view onto an occupied entry in a TypeMap.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":5617,"byte_end":5664,"line_start":179,"line_end":179,"column_start":5,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":103},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":5762,"byte_end":5768,"line_start":182,"line_end":182,"column_start":5,"column_end":11},"name":"Vacant","qualname":"::Entry::Vacant","value":"Entry::Vacant(VacantEntry)","parent":{"krate":0,"index":96},"children":[],"decl_id":null,"docs":" A view onto an unoccupied entry in a TypeMap.\n","sig":null,"attributes":[{"value":"/ A view onto an unoccupied entry in a TypeMap.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":5708,"byte_end":5757,"line_start":181,"line_end":181,"column_start":5,"column_end":54}}]},{"kind":"Enum","id":{"krate":0,"index":96},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":5555,"byte_end":5560,"line_start":178,"line_end":178,"column_start":10,"column_end":15},"name":"Entry","qualname":"::Entry","value":"pub enum Entry<'a, K, A: ?Sized + UnsafeAnyExt + 'a = UnsafeAny> {\n    Occupied(OccupiedEntry),\n    Vacant(VacantEntry),\n}","parent":null,"children":[{"krate":0,"index":100},{"krate":0,"index":103}],"decl_id":null,"docs":" A view onto an entry in a TypeMap.\n","sig":null,"attributes":[{"value":"/ A view onto an entry in a TypeMap.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":5507,"byte_end":5545,"line_start":177,"line_end":177,"column_start":1,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":110},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":6026,"byte_end":6035,"line_start":188,"line_end":188,"column_start":12,"column_end":21},"name":"or_insert","qualname":"<Entry>::or_insert","value":"pub fn or_insert(Self, K::Value) -> &'a mut K::Value where K::Value: Any +\nImplements<A>","parent":null,"children":[],"decl_id":null,"docs":" Ensures a value is in the entry by inserting the default if empty, and returns\n a mutable reference to the value in the entry.\n","sig":null,"attributes":[{"value":"/ Ensures a value is in the entry by inserting the default if empty, and returns","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":5877,"byte_end":5959,"line_start":186,"line_end":186,"column_start":5,"column_end":87}},{"value":"/ a mutable reference to the value in the entry.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":5964,"byte_end":6014,"line_start":187,"line_end":187,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":111},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":6452,"byte_end":6466,"line_start":198,"line_end":198,"column_start":12,"column_end":26},"name":"or_insert_with","qualname":"<Entry>::or_insert_with","value":"pub fn or_insert_with<F: FnOnce() -> K::Value>(Self, F) -> &'a mut K::Value\nwhere K::Value: Any + Implements<A>","parent":null,"children":[],"decl_id":null,"docs":" Ensures a value is in the entry by inserting the result of the default function if empty,\n and returns a mutable reference to the value in the entry.\n","sig":null,"attributes":[{"value":"/ Ensures a value is in the entry by inserting the result of the default function if empty,","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":6280,"byte_end":6373,"line_start":196,"line_end":196,"column_start":5,"column_end":98}},{"value":"/ and returns a mutable reference to the value in the entry.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":6378,"byte_end":6440,"line_start":197,"line_end":197,"column_start":5,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":113},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":6788,"byte_end":6801,"line_start":208,"line_end":208,"column_start":12,"column_end":25},"name":"OccupiedEntry","qualname":"::OccupiedEntry","value":"OccupiedEntry {  }","parent":null,"children":[{"krate":0,"index":117},{"krate":0,"index":118}],"decl_id":null,"docs":" A view onto an occupied entry in a TypeMap.\n","sig":null,"attributes":[{"value":"/ A view onto an occupied entry in a TypeMap.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":6729,"byte_end":6776,"line_start":207,"line_end":207,"column_start":1,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":119},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":7001,"byte_end":7012,"line_start":214,"line_end":214,"column_start":12,"column_end":23},"name":"VacantEntry","qualname":"::VacantEntry","value":"VacantEntry {  }","parent":null,"children":[{"krate":0,"index":123},{"krate":0,"index":124}],"decl_id":null,"docs":" A view onto an unoccupied entry in a TypeMap.\n","sig":null,"attributes":[{"value":"/ A view onto an unoccupied entry in a TypeMap.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":6940,"byte_end":6989,"line_start":213,"line_end":213,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":129},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":7275,"byte_end":7278,"line_start":221,"line_end":221,"column_start":12,"column_end":15},"name":"get","qualname":"<OccupiedEntry>::get","value":"pub fn get(&Self) -> &K::Value where K::Value: Any + Implements<A>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to the entry's value.\n","sig":null,"attributes":[{"value":"/ Get a reference to the entry's value.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":7222,"byte_end":7263,"line_start":220,"line_end":220,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":130},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":7493,"byte_end":7500,"line_start":229,"line_end":229,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<OccupiedEntry>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut K::Value where K::Value: Any + Implements<A>","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to the entry's value.\n","sig":null,"attributes":[{"value":"/ Get a mutable reference to the entry's value.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":7432,"byte_end":7481,"line_start":228,"line_end":228,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":131},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":7761,"byte_end":7769,"line_start":237,"line_end":237,"column_start":12,"column_end":20},"name":"into_mut","qualname":"<OccupiedEntry>::into_mut","value":"pub fn into_mut(Self) -> &'a mut K::Value where K::Value: Any + Implements<A>","parent":null,"children":[],"decl_id":null,"docs":" Transform the entry into a mutable reference with the same lifetime as the map.\n","sig":null,"attributes":[{"value":"/ Transform the entry into a mutable reference with the same lifetime as the map.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":7666,"byte_end":7749,"line_start":236,"line_end":236,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":132},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":8002,"byte_end":8008,"line_start":245,"line_end":245,"column_start":12,"column_end":18},"name":"insert","qualname":"<OccupiedEntry>::insert","value":"pub fn insert(&mut Self, K::Value) -> K::Value where K::Value: Any +\nImplements<A>","parent":null,"children":[],"decl_id":null,"docs":" Set the entry's value and return the previous value.\n","sig":null,"attributes":[{"value":"/ Set the entry's value and return the previous value.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":7934,"byte_end":7990,"line_start":244,"line_end":244,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":133},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":8276,"byte_end":8282,"line_start":253,"line_end":253,"column_start":12,"column_end":18},"name":"remove","qualname":"<OccupiedEntry>::remove","value":"pub fn remove(Self) -> K::Value where K::Value: Any + Implements<A>","parent":null,"children":[],"decl_id":null,"docs":" Move the entry's value out of the map, consuming the entry.\n","sig":null,"attributes":[{"value":"/ Move the entry's value out of the map, consuming the entry.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":8201,"byte_end":8264,"line_start":252,"line_end":252,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":138},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":8578,"byte_end":8584,"line_start":263,"line_end":263,"column_start":12,"column_end":18},"name":"insert","qualname":"<VacantEntry>::insert","value":"pub fn insert(Self, K::Value) -> &'a mut K::Value where K::Value: Any +\nImplements<A>","parent":null,"children":[],"decl_id":null,"docs":" Set the entry's value and return a mutable reference to it.\n","sig":null,"attributes":[{"value":"/ Set the entry's value and return a mutable reference to it.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":8503,"byte_end":8566,"line_start":262,"line_end":262,"column_start":5,"column_end":68}}]},{"kind":"Trait","id":{"krate":0,"index":153},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/internals.rs","byte_start":11763,"byte_end":11771,"line_start":13,"line_end":13,"column_start":11,"column_end":19},"name":"DebugAny","qualname":"::internals::DebugAny","value":"DebugAny: Any + Debug","parent":null,"children":[],"decl_id":null,"docs":" A marker trait meant for use as the `A` parameter in `TypeMap`.","sig":null,"attributes":[{"value":"/ A marker trait meant for use as the `A` parameter in `TypeMap`.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/internals.rs","byte_start":11351,"byte_end":11418,"line_start":5,"line_end":5,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/internals.rs","byte_start":11419,"byte_end":11422,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ This can be used to construct `TypeMap`s containing only types which","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/internals.rs","byte_start":11423,"byte_end":11495,"line_start":7,"line_end":7,"column_start":1,"column_end":73}},{"value":"/ implement `Debug` like so: `TypeMap::<DebugAny>::custom()`, which produces","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/internals.rs","byte_start":11496,"byte_end":11574,"line_start":8,"line_end":8,"column_start":1,"column_end":79}},{"value":"/ a `TypeMap<DebugAny>`. Combine `DebugAny` with `Send` or `Sync` to add","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/internals.rs","byte_start":11575,"byte_end":11649,"line_start":9,"line_end":9,"column_start":1,"column_end":75}},{"value":"/ additional bounds.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/internals.rs","byte_start":11650,"byte_end":11672,"line_start":10,"line_end":10,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/internals.rs","byte_start":11673,"byte_end":11676,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ There is also an exported alias for this type of `TypeMap`, `DebugMap`.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/internals.rs","byte_start":11677,"byte_end":11752,"line_start":12,"line_end":12,"column_start":1,"column_end":76}}]},{"kind":"Trait","id":{"krate":0,"index":160},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/internals.rs","byte_start":12435,"byte_end":12443,"line_start":29,"line_end":29,"column_start":11,"column_end":19},"name":"CloneAny","qualname":"::internals::CloneAny","value":"CloneAny: Any","parent":null,"children":[{"krate":0,"index":161},{"krate":0,"index":162},{"krate":0,"index":163},{"krate":0,"index":164}],"decl_id":null,"docs":" A marker trait meant for use as the `A` parameter in `TypeMap`.","sig":null,"attributes":[{"value":"/ A marker trait meant for use as the `A` parameter in `TypeMap`.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/internals.rs","byte_start":12023,"byte_end":12090,"line_start":21,"line_end":21,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/internals.rs","byte_start":12091,"byte_end":12094,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ This can be used to construct `TypeMap`s containing only types which","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/internals.rs","byte_start":12095,"byte_end":12167,"line_start":23,"line_end":23,"column_start":1,"column_end":73}},{"value":"/ implement `Clone` like so: `TypeMap::<CloneAny>::custom()`, which produces","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/internals.rs","byte_start":12168,"byte_end":12246,"line_start":24,"line_end":24,"column_start":1,"column_end":79}},{"value":"/ a `TypeMap<CloneAny>`. Combine `CloneAny` with `Send` or `Sync` to add","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/internals.rs","byte_start":12247,"byte_end":12321,"line_start":25,"line_end":25,"column_start":1,"column_end":75}},{"value":"/ additional bounds.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/internals.rs","byte_start":12322,"byte_end":12344,"line_start":26,"line_end":26,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/internals.rs","byte_start":12345,"byte_end":12348,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ There is also an exported alias for this type of `TypeMap`, `CloneAny`.","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/internals.rs","byte_start":12349,"byte_end":12424,"line_start":28,"line_end":28,"column_start":1,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":161},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/internals.rs","byte_start":12477,"byte_end":12486,"line_start":31,"line_end":31,"column_start":8,"column_end":17},"name":"clone_any","qualname":"::internals::CloneAny::clone_any","value":"pub fn clone_any(&Self) -> Box<CloneAny>","parent":{"krate":0,"index":160},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":162},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/internals.rs","byte_start":12538,"byte_end":12552,"line_start":33,"line_end":33,"column_start":8,"column_end":22},"name":"clone_any_send","qualname":"::internals::CloneAny::clone_any_send","value":"pub fn clone_any_send(&Self) -> Box<CloneAny + Send> where Self: Send","parent":{"krate":0,"index":160},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":163},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/internals.rs","byte_start":12628,"byte_end":12642,"line_start":35,"line_end":35,"column_start":8,"column_end":22},"name":"clone_any_sync","qualname":"::internals::CloneAny::clone_any_sync","value":"pub fn clone_any_sync(&Self) -> Box<CloneAny + Sync> where Self: Sync","parent":{"krate":0,"index":160},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":164},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/internals.rs","byte_start":12718,"byte_end":12737,"line_start":37,"line_end":37,"column_start":8,"column_end":27},"name":"clone_any_send_sync","qualname":"::internals::CloneAny::clone_any_send_sync","value":"pub fn clone_any_send_sync(&Self) -> Box<CloneAny + Send + Sync> where\nSelf: Send + Sync","parent":{"krate":0,"index":160},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":183},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/internals.rs","byte_start":13976,"byte_end":13986,"line_start":79,"line_end":79,"column_start":18,"column_end":28},"name":"Implements","qualname":"::internals::Implements","value":"Implements<A: ?Sized + UnsafeAnyExt>","parent":null,"children":[{"krate":0,"index":185}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":185},"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/internals.rs","byte_start":14022,"byte_end":14033,"line_start":80,"line_end":80,"column_start":8,"column_end":19},"name":"into_object","qualname":"::internals::Implements::into_object","value":"pub fn into_object(Self) -> Box<A>","parent":{"krate":0,"index":183},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":905,"byte_end":912,"line_start":32,"line_end":32,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":47}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":2579,"byte_end":2586,"line_start":85,"line_end":85,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":70}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":2722,"byte_end":2729,"line_start":92,"line_end":92,"column_start":32,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":73},{"krate":0,"index":74},{"krate":0,"index":77},{"krate":0,"index":80},{"krate":0,"index":83},{"krate":0,"index":85},{"krate":0,"index":88},{"krate":0,"index":91},{"krate":0,"index":92},{"krate":0,"index":93},{"krate":0,"index":94},{"krate":0,"index":95}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":5855,"byte_end":5860,"line_start":185,"line_end":185,"column_start":61,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":110},{"krate":0,"index":111}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":7192,"byte_end":7205,"line_start":219,"line_end":219,"column_start":44,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":129},{"krate":0,"index":130},{"krate":0,"index":131},{"krate":0,"index":132},{"krate":0,"index":133}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":8475,"byte_end":8486,"line_start":261,"line_end":261,"column_start":44,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":138}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/internals.rs","byte_start":11823,"byte_end":11824,"line_start":14,"line_end":14,"column_start":35,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/internals.rs","byte_start":12838,"byte_end":12839,"line_start":40,"line_end":40,"column_start":35,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":167},{"krate":0,"index":168},{"krate":0,"index":169},{"krate":0,"index":170}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/internals.rs","byte_start":13281,"byte_end":13284,"line_start":57,"line_end":57,"column_start":16,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":172}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/internals.rs","byte_start":13377,"byte_end":13380,"line_start":61,"line_end":61,"column_start":16,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":174}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/internals.rs","byte_start":13492,"byte_end":13495,"line_start":65,"line_end":65,"column_start":16,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":176}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/internals.rs","byte_start":13607,"byte_end":13610,"line_start":69,"line_end":69,"column_start":16,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":178}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/internals.rs","byte_start":14106,"byte_end":14107,"line_start":83,"line_end":83,"column_start":53,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":188}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/internals.rs","byte_start":14243,"byte_end":14244,"line_start":87,"line_end":87,"column_start":69,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":191}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/internals.rs","byte_start":14387,"byte_end":14388,"line_start":91,"line_end":91,"column_start":69,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":194}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/internals.rs","byte_start":14545,"byte_end":14546,"line_start":95,"line_end":95,"column_start":83,"column_end":84},"value":"","parent":null,"children":[{"krate":0,"index":197}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/internals.rs","byte_start":14678,"byte_end":14679,"line_start":99,"line_end":99,"column_start":51,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":200}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/internals.rs","byte_start":14812,"byte_end":14813,"line_start":103,"line_end":103,"column_start":67,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":203}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/internals.rs","byte_start":14967,"byte_end":14968,"line_start":107,"line_end":107,"column_start":81,"column_end":82},"value":"","parent":null,"children":[{"krate":0,"index":206}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/internals.rs","byte_start":15099,"byte_end":15100,"line_start":111,"line_end":111,"column_start":51,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":209}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/internals.rs","byte_start":15231,"byte_end":15232,"line_start":115,"line_end":115,"column_start":65,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":212}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/internals.rs","byte_start":15370,"byte_end":15371,"line_start":119,"line_end":119,"column_start":65,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":215}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/internals.rs","byte_start":15523,"byte_end":15524,"line_start":123,"line_end":123,"column_start":79,"column_end":80},"value":"","parent":null,"children":[{"krate":0,"index":218}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":905,"byte_end":912,"line_start":32,"line_end":32,"column_start":27,"column_end":34},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":219},"to":{"krate":2,"index":2679}},{"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":2490,"byte_end":2493,"line_start":80,"line_end":80,"column_start":16,"column_end":19},"kind":"SuperTrait","from":{"krate":2,"index":3778},"to":{"krate":0,"index":67}},{"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":2579,"byte_end":2586,"line_start":85,"line_end":85,"column_start":6,"column_end":13},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":219},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":2722,"byte_end":2729,"line_start":92,"line_end":92,"column_start":32,"column_end":39},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":219},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":5855,"byte_end":5860,"line_start":185,"line_end":185,"column_start":61,"column_end":66},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":96},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":7192,"byte_end":7205,"line_start":219,"line_end":219,"column_start":44,"column_end":57},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":113},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/lib.rs","byte_start":8475,"byte_end":8486,"line_start":261,"line_end":261,"column_start":44,"column_end":55},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":119},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/internals.rs","byte_start":11773,"byte_end":11776,"line_start":13,"line_end":13,"column_start":21,"column_end":24},"kind":"SuperTrait","from":{"krate":2,"index":3778},"to":{"krate":0,"index":153}},{"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/internals.rs","byte_start":11779,"byte_end":11784,"line_start":13,"line_end":13,"column_start":27,"column_end":32},"kind":"SuperTrait","from":{"krate":2,"index":9678},"to":{"krate":0,"index":153}},{"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/internals.rs","byte_start":11823,"byte_end":11824,"line_start":14,"line_end":14,"column_start":35,"column_end":36},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":155},"to":{"krate":0,"index":153}},{"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/internals.rs","byte_start":12445,"byte_end":12448,"line_start":29,"line_end":29,"column_start":21,"column_end":24},"kind":"SuperTrait","from":{"krate":2,"index":3778},"to":{"krate":0,"index":160}},{"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/internals.rs","byte_start":12838,"byte_end":12839,"line_start":40,"line_end":40,"column_start":35,"column_end":36},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":166},"to":{"krate":0,"index":160}},{"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/internals.rs","byte_start":13281,"byte_end":13284,"line_start":57,"line_end":57,"column_start":16,"column_end":19},"kind":{"Impl":{"id":8}},"from":{"krate":5,"index":321},"to":{"krate":2,"index":2679}},{"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/internals.rs","byte_start":13377,"byte_end":13380,"line_start":61,"line_end":61,"column_start":16,"column_end":19},"kind":{"Impl":{"id":9}},"from":{"krate":5,"index":321},"to":{"krate":2,"index":2679}},{"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/internals.rs","byte_start":13492,"byte_end":13495,"line_start":65,"line_end":65,"column_start":16,"column_end":19},"kind":{"Impl":{"id":10}},"from":{"krate":5,"index":321},"to":{"krate":2,"index":2679}},{"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/internals.rs","byte_start":13607,"byte_end":13610,"line_start":69,"line_end":69,"column_start":16,"column_end":19},"kind":{"Impl":{"id":11}},"from":{"krate":5,"index":321},"to":{"krate":2,"index":2679}},{"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/internals.rs","byte_start":14106,"byte_end":14107,"line_start":83,"line_end":83,"column_start":53,"column_end":54},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":187},"to":{"krate":0,"index":183}},{"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/internals.rs","byte_start":14243,"byte_end":14244,"line_start":87,"line_end":87,"column_start":69,"column_end":70},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":190},"to":{"krate":0,"index":183}},{"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/internals.rs","byte_start":14387,"byte_end":14388,"line_start":91,"line_end":91,"column_start":69,"column_end":70},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":193},"to":{"krate":0,"index":183}},{"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/internals.rs","byte_start":14545,"byte_end":14546,"line_start":95,"line_end":95,"column_start":83,"column_end":84},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":196},"to":{"krate":0,"index":183}},{"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/internals.rs","byte_start":14678,"byte_end":14679,"line_start":99,"line_end":99,"column_start":51,"column_end":52},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":199},"to":{"krate":0,"index":183}},{"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/internals.rs","byte_start":14812,"byte_end":14813,"line_start":103,"line_end":103,"column_start":67,"column_end":68},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":202},"to":{"krate":0,"index":183}},{"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/internals.rs","byte_start":14967,"byte_end":14968,"line_start":107,"line_end":107,"column_start":81,"column_end":82},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":205},"to":{"krate":0,"index":183}},{"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/internals.rs","byte_start":15099,"byte_end":15100,"line_start":111,"line_end":111,"column_start":51,"column_end":52},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":208},"to":{"krate":0,"index":183}},{"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/internals.rs","byte_start":15231,"byte_end":15232,"line_start":115,"line_end":115,"column_start":65,"column_end":66},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":211},"to":{"krate":0,"index":183}},{"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/internals.rs","byte_start":15370,"byte_end":15371,"line_start":119,"line_end":119,"column_start":65,"column_end":66},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":214},"to":{"krate":0,"index":183}},{"span":{"file_name":"/home/tpicaud/.cargo/registry/src/github.com-1ecc6299db9ec823/typemap-0.3.3/src/internals.rs","byte_start":15523,"byte_end":15524,"line_start":123,"line_end":123,"column_start":79,"column_end":80},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":217},"to":{"krate":0,"index":183}}]}